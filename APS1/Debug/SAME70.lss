
SAME70.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f3c  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00400f3c  00400f3c  00010f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000c9c  20400000  00400f44  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000000b0  20400c9c  00401be0  00020c9c  2**2
                  ALLOC
  4 .stack        00002004  20400d4c  00401c90  00020c9c  2**0
                  ALLOC
  5 .heap         00000200  20402d50  00403c94  00020c9c  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020c9c  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020cca  2**0
                  CONTENTS, READONLY
  8 .debug_info   0000b4aa  00000000  00000000  00020d23  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000184a  00000000  00000000  0002c1cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000024de  00000000  00000000  0002da17  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000570  00000000  00000000  0002fef5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000600  00000000  00000000  00030465  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001c330  00000000  00000000  00030a65  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000068f1  00000000  00000000  0004cd95  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000896d7  00000000  00000000  00053686  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00000d48  00000000  00000000  000dcd60  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	50 2d 40 20 dd 04 40 00 d9 04 40 00 d9 04 40 00     P-@ ..@...@...@.
  400010:	d9 04 40 00 d9 04 40 00 d9 04 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	d9 04 40 00 d9 04 40 00 00 00 00 00 d9 04 40 00     ..@...@.......@.
  40003c:	d9 04 40 00 d9 04 40 00 d9 04 40 00 d9 04 40 00     ..@...@...@...@.
  40004c:	d9 04 40 00 d9 04 40 00 d9 04 40 00 d9 04 40 00     ..@...@...@...@.
  40005c:	d9 04 40 00 d9 04 40 00 00 00 00 00 01 03 40 00     ..@...@.......@.
  40006c:	15 03 40 00 29 03 40 00 d9 04 40 00 d9 04 40 00     ..@.).@...@...@.
  40007c:	d9 04 40 00 3d 03 40 00 51 03 40 00 d9 04 40 00     ..@.=.@.Q.@...@.
  40008c:	d9 04 40 00 d9 04 40 00 d9 04 40 00 d9 04 40 00     ..@...@...@...@.
  40009c:	d9 04 40 00 d9 04 40 00 d9 04 40 00 d9 04 40 00     ..@...@...@...@.
  4000ac:	d9 04 40 00 d9 04 40 00 d9 04 40 00 d9 04 40 00     ..@...@...@...@.
  4000bc:	d9 04 40 00 d9 04 40 00 d9 04 40 00 d9 04 40 00     ..@...@...@...@.
  4000cc:	d9 04 40 00 00 00 00 00 d9 04 40 00 00 00 00 00     ..@.......@.....
  4000dc:	d9 04 40 00 d9 04 40 00 d9 04 40 00 d9 04 40 00     ..@...@...@...@.
  4000ec:	d9 04 40 00 d9 04 40 00 d9 04 40 00 d9 04 40 00     ..@...@...@...@.
  4000fc:	d9 04 40 00 d9 04 40 00 d9 04 40 00 d9 04 40 00     ..@...@...@...@.
  40010c:	d9 04 40 00 d9 04 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 d9 04 40 00 d9 04 40 00 d9 04 40 00     ......@...@...@.
  40012c:	d9 04 40 00 d9 04 40 00 00 00 00 00 d9 04 40 00     ..@...@.......@.
  40013c:	d9 04 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	20400c9c 	.word	0x20400c9c
  40015c:	00000000 	.word	0x00000000
  400160:	00400f44 	.word	0x00400f44

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00400f44 	.word	0x00400f44
  4001a0:	20400ca0 	.word	0x20400ca0
  4001a4:	00400f44 	.word	0x00400f44
  4001a8:	00000000 	.word	0x00000000

004001ac <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4001ac:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4001ae:	4810      	ldr	r0, [pc, #64]	; (4001f0 <sysclk_init+0x44>)
  4001b0:	4b10      	ldr	r3, [pc, #64]	; (4001f4 <sysclk_init+0x48>)
  4001b2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001b4:	213e      	movs	r1, #62	; 0x3e
  4001b6:	2000      	movs	r0, #0
  4001b8:	4b0f      	ldr	r3, [pc, #60]	; (4001f8 <sysclk_init+0x4c>)
  4001ba:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4001bc:	4c0f      	ldr	r4, [pc, #60]	; (4001fc <sysclk_init+0x50>)
  4001be:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001c0:	2800      	cmp	r0, #0
  4001c2:	d0fc      	beq.n	4001be <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001c4:	4b0e      	ldr	r3, [pc, #56]	; (400200 <sysclk_init+0x54>)
  4001c6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4001c8:	4a0e      	ldr	r2, [pc, #56]	; (400204 <sysclk_init+0x58>)
  4001ca:	4b0f      	ldr	r3, [pc, #60]	; (400208 <sysclk_init+0x5c>)
  4001cc:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4001ce:	4c0f      	ldr	r4, [pc, #60]	; (40020c <sysclk_init+0x60>)
  4001d0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001d2:	2800      	cmp	r0, #0
  4001d4:	d0fc      	beq.n	4001d0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4001d6:	2002      	movs	r0, #2
  4001d8:	4b0d      	ldr	r3, [pc, #52]	; (400210 <sysclk_init+0x64>)
  4001da:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4001dc:	2000      	movs	r0, #0
  4001de:	4b0d      	ldr	r3, [pc, #52]	; (400214 <sysclk_init+0x68>)
  4001e0:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4001e2:	4b0d      	ldr	r3, [pc, #52]	; (400218 <sysclk_init+0x6c>)
  4001e4:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4001e6:	4802      	ldr	r0, [pc, #8]	; (4001f0 <sysclk_init+0x44>)
  4001e8:	4b02      	ldr	r3, [pc, #8]	; (4001f4 <sysclk_init+0x48>)
  4001ea:	4798      	blx	r3
  4001ec:	bd10      	pop	{r4, pc}
  4001ee:	bf00      	nop
  4001f0:	11e1a300 	.word	0x11e1a300
  4001f4:	004006b1 	.word	0x004006b1
  4001f8:	00400401 	.word	0x00400401
  4001fc:	00400455 	.word	0x00400455
  400200:	00400465 	.word	0x00400465
  400204:	20183f01 	.word	0x20183f01
  400208:	400e0600 	.word	0x400e0600
  40020c:	00400475 	.word	0x00400475
  400210:	00400365 	.word	0x00400365
  400214:	0040039d 	.word	0x0040039d
  400218:	004005a5 	.word	0x004005a5

0040021c <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40021c:	b90a      	cbnz	r2, 400222 <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40021e:	6601      	str	r1, [r0, #96]	; 0x60
  400220:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400222:	6641      	str	r1, [r0, #100]	; 0x64
  400224:	4770      	bx	lr

00400226 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  400226:	6301      	str	r1, [r0, #48]	; 0x30
  400228:	4770      	bx	lr

0040022a <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  40022a:	6341      	str	r1, [r0, #52]	; 0x34
  40022c:	4770      	bx	lr

0040022e <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
  40022e:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
  400232:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400236:	d105      	bne.n	400244 <pio_get+0x16>
		ul_reg = p_pio->PIO_ODSR;
  400238:	6b83      	ldr	r3, [r0, #56]	; 0x38
	} else {
		ul_reg = p_pio->PIO_PDSR;
	}

	if ((ul_reg & ul_mask) == 0) {
  40023a:	4213      	tst	r3, r2
		return 0;
	} else {
		return 1;
	}
}
  40023c:	bf14      	ite	ne
  40023e:	2001      	movne	r0, #1
  400240:	2000      	moveq	r0, #0
  400242:	4770      	bx	lr
		ul_reg = p_pio->PIO_PDSR;
  400244:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  400246:	e7f8      	b.n	40023a <pio_get+0xc>

00400248 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400248:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  40024a:	f012 0f01 	tst.w	r2, #1
  40024e:	d10d      	bne.n	40026c <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  400250:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400252:	f012 0f0a 	tst.w	r2, #10
  400256:	d00b      	beq.n	400270 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  400258:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  40025a:	f012 0f02 	tst.w	r2, #2
  40025e:	d109      	bne.n	400274 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  400260:	f012 0f08 	tst.w	r2, #8
  400264:	d008      	beq.n	400278 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  400266:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  40026a:	e005      	b.n	400278 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  40026c:	6641      	str	r1, [r0, #100]	; 0x64
  40026e:	e7f0      	b.n	400252 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  400270:	6241      	str	r1, [r0, #36]	; 0x24
  400272:	e7f2      	b.n	40025a <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  400274:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  400278:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  40027a:	6001      	str	r1, [r0, #0]
  40027c:	4770      	bx	lr

0040027e <pio_set_output>:
{
  40027e:	b410      	push	{r4}
  400280:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  400282:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400284:	b94c      	cbnz	r4, 40029a <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  400286:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  400288:	b14b      	cbz	r3, 40029e <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  40028a:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  40028c:	b94a      	cbnz	r2, 4002a2 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  40028e:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400290:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400292:	6001      	str	r1, [r0, #0]
}
  400294:	f85d 4b04 	ldr.w	r4, [sp], #4
  400298:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  40029a:	6641      	str	r1, [r0, #100]	; 0x64
  40029c:	e7f4      	b.n	400288 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  40029e:	6541      	str	r1, [r0, #84]	; 0x54
  4002a0:	e7f4      	b.n	40028c <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  4002a2:	6301      	str	r1, [r0, #48]	; 0x30
  4002a4:	e7f4      	b.n	400290 <pio_set_output+0x12>

004002a6 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4002a6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4002a8:	4770      	bx	lr

004002aa <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4002aa:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4002ac:	4770      	bx	lr
	...

004002b0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4002b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4002b4:	4604      	mov	r4, r0
  4002b6:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4002b8:	4b0e      	ldr	r3, [pc, #56]	; (4002f4 <pio_handler_process+0x44>)
  4002ba:	4798      	blx	r3
  4002bc:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4002be:	4620      	mov	r0, r4
  4002c0:	4b0d      	ldr	r3, [pc, #52]	; (4002f8 <pio_handler_process+0x48>)
  4002c2:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4002c4:	4005      	ands	r5, r0
  4002c6:	d013      	beq.n	4002f0 <pio_handler_process+0x40>
  4002c8:	4c0c      	ldr	r4, [pc, #48]	; (4002fc <pio_handler_process+0x4c>)
  4002ca:	f104 0660 	add.w	r6, r4, #96	; 0x60
  4002ce:	e003      	b.n	4002d8 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4002d0:	42b4      	cmp	r4, r6
  4002d2:	d00d      	beq.n	4002f0 <pio_handler_process+0x40>
  4002d4:	3410      	adds	r4, #16
		while (status != 0) {
  4002d6:	b15d      	cbz	r5, 4002f0 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  4002d8:	6820      	ldr	r0, [r4, #0]
  4002da:	4540      	cmp	r0, r8
  4002dc:	d1f8      	bne.n	4002d0 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4002de:	6861      	ldr	r1, [r4, #4]
  4002e0:	4229      	tst	r1, r5
  4002e2:	d0f5      	beq.n	4002d0 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4002e4:	68e3      	ldr	r3, [r4, #12]
  4002e6:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4002e8:	6863      	ldr	r3, [r4, #4]
  4002ea:	ea25 0503 	bic.w	r5, r5, r3
  4002ee:	e7ef      	b.n	4002d0 <pio_handler_process+0x20>
  4002f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4002f4:	004002a7 	.word	0x004002a7
  4002f8:	004002ab 	.word	0x004002ab
  4002fc:	20400cb8 	.word	0x20400cb8

00400300 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400300:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  400302:	210a      	movs	r1, #10
  400304:	4801      	ldr	r0, [pc, #4]	; (40030c <PIOA_Handler+0xc>)
  400306:	4b02      	ldr	r3, [pc, #8]	; (400310 <PIOA_Handler+0x10>)
  400308:	4798      	blx	r3
  40030a:	bd08      	pop	{r3, pc}
  40030c:	400e0e00 	.word	0x400e0e00
  400310:	004002b1 	.word	0x004002b1

00400314 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400314:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400316:	210b      	movs	r1, #11
  400318:	4801      	ldr	r0, [pc, #4]	; (400320 <PIOB_Handler+0xc>)
  40031a:	4b02      	ldr	r3, [pc, #8]	; (400324 <PIOB_Handler+0x10>)
  40031c:	4798      	blx	r3
  40031e:	bd08      	pop	{r3, pc}
  400320:	400e1000 	.word	0x400e1000
  400324:	004002b1 	.word	0x004002b1

00400328 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400328:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  40032a:	210c      	movs	r1, #12
  40032c:	4801      	ldr	r0, [pc, #4]	; (400334 <PIOC_Handler+0xc>)
  40032e:	4b02      	ldr	r3, [pc, #8]	; (400338 <PIOC_Handler+0x10>)
  400330:	4798      	blx	r3
  400332:	bd08      	pop	{r3, pc}
  400334:	400e1200 	.word	0x400e1200
  400338:	004002b1 	.word	0x004002b1

0040033c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  40033c:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  40033e:	2110      	movs	r1, #16
  400340:	4801      	ldr	r0, [pc, #4]	; (400348 <PIOD_Handler+0xc>)
  400342:	4b02      	ldr	r3, [pc, #8]	; (40034c <PIOD_Handler+0x10>)
  400344:	4798      	blx	r3
  400346:	bd08      	pop	{r3, pc}
  400348:	400e1400 	.word	0x400e1400
  40034c:	004002b1 	.word	0x004002b1

00400350 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  400350:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  400352:	2111      	movs	r1, #17
  400354:	4801      	ldr	r0, [pc, #4]	; (40035c <PIOE_Handler+0xc>)
  400356:	4b02      	ldr	r3, [pc, #8]	; (400360 <PIOE_Handler+0x10>)
  400358:	4798      	blx	r3
  40035a:	bd08      	pop	{r3, pc}
  40035c:	400e1600 	.word	0x400e1600
  400360:	004002b1 	.word	0x004002b1

00400364 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400364:	2803      	cmp	r0, #3
  400366:	d011      	beq.n	40038c <pmc_mck_set_division+0x28>
  400368:	2804      	cmp	r0, #4
  40036a:	d012      	beq.n	400392 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  40036c:	2802      	cmp	r0, #2
  40036e:	bf0c      	ite	eq
  400370:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400374:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400376:	4a08      	ldr	r2, [pc, #32]	; (400398 <pmc_mck_set_division+0x34>)
  400378:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40037a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  40037e:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  400380:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400382:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400384:	f013 0f08 	tst.w	r3, #8
  400388:	d0fb      	beq.n	400382 <pmc_mck_set_division+0x1e>
}
  40038a:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  40038c:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  400390:	e7f1      	b.n	400376 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400392:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  400396:	e7ee      	b.n	400376 <pmc_mck_set_division+0x12>
  400398:	400e0600 	.word	0x400e0600

0040039c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  40039c:	4a17      	ldr	r2, [pc, #92]	; (4003fc <pmc_switch_mck_to_pllack+0x60>)
  40039e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4003a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4003a4:	4318      	orrs	r0, r3
  4003a6:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4003a8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4003aa:	f013 0f08 	tst.w	r3, #8
  4003ae:	d10a      	bne.n	4003c6 <pmc_switch_mck_to_pllack+0x2a>
  4003b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4003b4:	4911      	ldr	r1, [pc, #68]	; (4003fc <pmc_switch_mck_to_pllack+0x60>)
  4003b6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4003b8:	f012 0f08 	tst.w	r2, #8
  4003bc:	d103      	bne.n	4003c6 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4003be:	3b01      	subs	r3, #1
  4003c0:	d1f9      	bne.n	4003b6 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4003c2:	2001      	movs	r0, #1
  4003c4:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4003c6:	4a0d      	ldr	r2, [pc, #52]	; (4003fc <pmc_switch_mck_to_pllack+0x60>)
  4003c8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4003ca:	f023 0303 	bic.w	r3, r3, #3
  4003ce:	f043 0302 	orr.w	r3, r3, #2
  4003d2:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4003d4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4003d6:	f013 0f08 	tst.w	r3, #8
  4003da:	d10a      	bne.n	4003f2 <pmc_switch_mck_to_pllack+0x56>
  4003dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4003e0:	4906      	ldr	r1, [pc, #24]	; (4003fc <pmc_switch_mck_to_pllack+0x60>)
  4003e2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4003e4:	f012 0f08 	tst.w	r2, #8
  4003e8:	d105      	bne.n	4003f6 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4003ea:	3b01      	subs	r3, #1
  4003ec:	d1f9      	bne.n	4003e2 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4003ee:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4003f0:	4770      	bx	lr
	return 0;
  4003f2:	2000      	movs	r0, #0
  4003f4:	4770      	bx	lr
  4003f6:	2000      	movs	r0, #0
  4003f8:	4770      	bx	lr
  4003fa:	bf00      	nop
  4003fc:	400e0600 	.word	0x400e0600

00400400 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400400:	b9a0      	cbnz	r0, 40042c <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400402:	480e      	ldr	r0, [pc, #56]	; (40043c <pmc_switch_mainck_to_xtal+0x3c>)
  400404:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400406:	0209      	lsls	r1, r1, #8
  400408:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40040a:	4a0d      	ldr	r2, [pc, #52]	; (400440 <pmc_switch_mainck_to_xtal+0x40>)
  40040c:	401a      	ands	r2, r3
  40040e:	4b0d      	ldr	r3, [pc, #52]	; (400444 <pmc_switch_mainck_to_xtal+0x44>)
  400410:	4313      	orrs	r3, r2
  400412:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400414:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400416:	4602      	mov	r2, r0
  400418:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40041a:	f013 0f01 	tst.w	r3, #1
  40041e:	d0fb      	beq.n	400418 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400420:	4a06      	ldr	r2, [pc, #24]	; (40043c <pmc_switch_mainck_to_xtal+0x3c>)
  400422:	6a11      	ldr	r1, [r2, #32]
  400424:	4b08      	ldr	r3, [pc, #32]	; (400448 <pmc_switch_mainck_to_xtal+0x48>)
  400426:	430b      	orrs	r3, r1
  400428:	6213      	str	r3, [r2, #32]
  40042a:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40042c:	4903      	ldr	r1, [pc, #12]	; (40043c <pmc_switch_mainck_to_xtal+0x3c>)
  40042e:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400430:	4a06      	ldr	r2, [pc, #24]	; (40044c <pmc_switch_mainck_to_xtal+0x4c>)
  400432:	401a      	ands	r2, r3
  400434:	4b06      	ldr	r3, [pc, #24]	; (400450 <pmc_switch_mainck_to_xtal+0x50>)
  400436:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400438:	620b      	str	r3, [r1, #32]
  40043a:	4770      	bx	lr
  40043c:	400e0600 	.word	0x400e0600
  400440:	ffc8fffc 	.word	0xffc8fffc
  400444:	00370001 	.word	0x00370001
  400448:	01370000 	.word	0x01370000
  40044c:	fec8fffc 	.word	0xfec8fffc
  400450:	01370002 	.word	0x01370002

00400454 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400454:	4b02      	ldr	r3, [pc, #8]	; (400460 <pmc_osc_is_ready_mainck+0xc>)
  400456:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400458:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  40045c:	4770      	bx	lr
  40045e:	bf00      	nop
  400460:	400e0600 	.word	0x400e0600

00400464 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400464:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400468:	4b01      	ldr	r3, [pc, #4]	; (400470 <pmc_disable_pllack+0xc>)
  40046a:	629a      	str	r2, [r3, #40]	; 0x28
  40046c:	4770      	bx	lr
  40046e:	bf00      	nop
  400470:	400e0600 	.word	0x400e0600

00400474 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400474:	4b02      	ldr	r3, [pc, #8]	; (400480 <pmc_is_locked_pllack+0xc>)
  400476:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400478:	f000 0002 	and.w	r0, r0, #2
  40047c:	4770      	bx	lr
  40047e:	bf00      	nop
  400480:	400e0600 	.word	0x400e0600

00400484 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400484:	283f      	cmp	r0, #63	; 0x3f
  400486:	d81e      	bhi.n	4004c6 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400488:	281f      	cmp	r0, #31
  40048a:	d80c      	bhi.n	4004a6 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  40048c:	4b11      	ldr	r3, [pc, #68]	; (4004d4 <pmc_enable_periph_clk+0x50>)
  40048e:	699a      	ldr	r2, [r3, #24]
  400490:	2301      	movs	r3, #1
  400492:	4083      	lsls	r3, r0
  400494:	4393      	bics	r3, r2
  400496:	d018      	beq.n	4004ca <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400498:	2301      	movs	r3, #1
  40049a:	fa03 f000 	lsl.w	r0, r3, r0
  40049e:	4b0d      	ldr	r3, [pc, #52]	; (4004d4 <pmc_enable_periph_clk+0x50>)
  4004a0:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4004a2:	2000      	movs	r0, #0
  4004a4:	4770      	bx	lr
		ul_id -= 32;
  4004a6:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4004a8:	4b0a      	ldr	r3, [pc, #40]	; (4004d4 <pmc_enable_periph_clk+0x50>)
  4004aa:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4004ae:	2301      	movs	r3, #1
  4004b0:	4083      	lsls	r3, r0
  4004b2:	4393      	bics	r3, r2
  4004b4:	d00b      	beq.n	4004ce <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4004b6:	2301      	movs	r3, #1
  4004b8:	fa03 f000 	lsl.w	r0, r3, r0
  4004bc:	4b05      	ldr	r3, [pc, #20]	; (4004d4 <pmc_enable_periph_clk+0x50>)
  4004be:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  4004c2:	2000      	movs	r0, #0
  4004c4:	4770      	bx	lr
		return 1;
  4004c6:	2001      	movs	r0, #1
  4004c8:	4770      	bx	lr
	return 0;
  4004ca:	2000      	movs	r0, #0
  4004cc:	4770      	bx	lr
  4004ce:	2000      	movs	r0, #0
}
  4004d0:	4770      	bx	lr
  4004d2:	bf00      	nop
  4004d4:	400e0600 	.word	0x400e0600

004004d8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4004d8:	e7fe      	b.n	4004d8 <Dummy_Handler>
	...

004004dc <Reset_Handler>:
{
  4004dc:	b500      	push	{lr}
  4004de:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  4004e0:	4b25      	ldr	r3, [pc, #148]	; (400578 <Reset_Handler+0x9c>)
  4004e2:	4a26      	ldr	r2, [pc, #152]	; (40057c <Reset_Handler+0xa0>)
  4004e4:	429a      	cmp	r2, r3
  4004e6:	d010      	beq.n	40050a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  4004e8:	4b25      	ldr	r3, [pc, #148]	; (400580 <Reset_Handler+0xa4>)
  4004ea:	4a23      	ldr	r2, [pc, #140]	; (400578 <Reset_Handler+0x9c>)
  4004ec:	429a      	cmp	r2, r3
  4004ee:	d20c      	bcs.n	40050a <Reset_Handler+0x2e>
  4004f0:	3b01      	subs	r3, #1
  4004f2:	1a9b      	subs	r3, r3, r2
  4004f4:	f023 0303 	bic.w	r3, r3, #3
  4004f8:	3304      	adds	r3, #4
  4004fa:	4413      	add	r3, r2
  4004fc:	491f      	ldr	r1, [pc, #124]	; (40057c <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  4004fe:	f851 0b04 	ldr.w	r0, [r1], #4
  400502:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  400506:	429a      	cmp	r2, r3
  400508:	d1f9      	bne.n	4004fe <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  40050a:	4b1e      	ldr	r3, [pc, #120]	; (400584 <Reset_Handler+0xa8>)
  40050c:	4a1e      	ldr	r2, [pc, #120]	; (400588 <Reset_Handler+0xac>)
  40050e:	429a      	cmp	r2, r3
  400510:	d20a      	bcs.n	400528 <Reset_Handler+0x4c>
  400512:	3b01      	subs	r3, #1
  400514:	1a9b      	subs	r3, r3, r2
  400516:	f023 0303 	bic.w	r3, r3, #3
  40051a:	3304      	adds	r3, #4
  40051c:	4413      	add	r3, r2
                *pDest++ = 0;
  40051e:	2100      	movs	r1, #0
  400520:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400524:	4293      	cmp	r3, r2
  400526:	d1fb      	bne.n	400520 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400528:	4a18      	ldr	r2, [pc, #96]	; (40058c <Reset_Handler+0xb0>)
  40052a:	4b19      	ldr	r3, [pc, #100]	; (400590 <Reset_Handler+0xb4>)
  40052c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400530:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400532:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400536:	fab3 f383 	clz	r3, r3
  40053a:	095b      	lsrs	r3, r3, #5
  40053c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40053e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400540:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400544:	2200      	movs	r2, #0
  400546:	4b13      	ldr	r3, [pc, #76]	; (400594 <Reset_Handler+0xb8>)
  400548:	701a      	strb	r2, [r3, #0]
	return flags;
  40054a:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  40054c:	4a12      	ldr	r2, [pc, #72]	; (400598 <Reset_Handler+0xbc>)
  40054e:	6813      	ldr	r3, [r2, #0]
  400550:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400554:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  400556:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40055a:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40055e:	b129      	cbz	r1, 40056c <Reset_Handler+0x90>
		cpu_irq_enable();
  400560:	2201      	movs	r2, #1
  400562:	4b0c      	ldr	r3, [pc, #48]	; (400594 <Reset_Handler+0xb8>)
  400564:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  400566:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40056a:	b662      	cpsie	i
        __libc_init_array();
  40056c:	4b0b      	ldr	r3, [pc, #44]	; (40059c <Reset_Handler+0xc0>)
  40056e:	4798      	blx	r3
        main();
  400570:	4b0b      	ldr	r3, [pc, #44]	; (4005a0 <Reset_Handler+0xc4>)
  400572:	4798      	blx	r3
  400574:	e7fe      	b.n	400574 <Reset_Handler+0x98>
  400576:	bf00      	nop
  400578:	20400000 	.word	0x20400000
  40057c:	00400f44 	.word	0x00400f44
  400580:	20400c9c 	.word	0x20400c9c
  400584:	20400d4c 	.word	0x20400d4c
  400588:	20400c9c 	.word	0x20400c9c
  40058c:	e000ed00 	.word	0xe000ed00
  400590:	00400000 	.word	0x00400000
  400594:	2040000a 	.word	0x2040000a
  400598:	e000ed88 	.word	0xe000ed88
  40059c:	00400da5 	.word	0x00400da5
  4005a0:	0040098d 	.word	0x0040098d

004005a4 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4005a4:	4b3b      	ldr	r3, [pc, #236]	; (400694 <SystemCoreClockUpdate+0xf0>)
  4005a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4005a8:	f003 0303 	and.w	r3, r3, #3
  4005ac:	2b01      	cmp	r3, #1
  4005ae:	d01d      	beq.n	4005ec <SystemCoreClockUpdate+0x48>
  4005b0:	b183      	cbz	r3, 4005d4 <SystemCoreClockUpdate+0x30>
  4005b2:	2b02      	cmp	r3, #2
  4005b4:	d036      	beq.n	400624 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4005b6:	4b37      	ldr	r3, [pc, #220]	; (400694 <SystemCoreClockUpdate+0xf0>)
  4005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4005ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4005be:	2b70      	cmp	r3, #112	; 0x70
  4005c0:	d05f      	beq.n	400682 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4005c2:	4b34      	ldr	r3, [pc, #208]	; (400694 <SystemCoreClockUpdate+0xf0>)
  4005c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4005c6:	4934      	ldr	r1, [pc, #208]	; (400698 <SystemCoreClockUpdate+0xf4>)
  4005c8:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4005cc:	680b      	ldr	r3, [r1, #0]
  4005ce:	40d3      	lsrs	r3, r2
  4005d0:	600b      	str	r3, [r1, #0]
  4005d2:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4005d4:	4b31      	ldr	r3, [pc, #196]	; (40069c <SystemCoreClockUpdate+0xf8>)
  4005d6:	695b      	ldr	r3, [r3, #20]
  4005d8:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4005dc:	bf14      	ite	ne
  4005de:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4005e2:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4005e6:	4b2c      	ldr	r3, [pc, #176]	; (400698 <SystemCoreClockUpdate+0xf4>)
  4005e8:	601a      	str	r2, [r3, #0]
  4005ea:	e7e4      	b.n	4005b6 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4005ec:	4b29      	ldr	r3, [pc, #164]	; (400694 <SystemCoreClockUpdate+0xf0>)
  4005ee:	6a1b      	ldr	r3, [r3, #32]
  4005f0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4005f4:	d003      	beq.n	4005fe <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4005f6:	4a2a      	ldr	r2, [pc, #168]	; (4006a0 <SystemCoreClockUpdate+0xfc>)
  4005f8:	4b27      	ldr	r3, [pc, #156]	; (400698 <SystemCoreClockUpdate+0xf4>)
  4005fa:	601a      	str	r2, [r3, #0]
  4005fc:	e7db      	b.n	4005b6 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4005fe:	4a29      	ldr	r2, [pc, #164]	; (4006a4 <SystemCoreClockUpdate+0x100>)
  400600:	4b25      	ldr	r3, [pc, #148]	; (400698 <SystemCoreClockUpdate+0xf4>)
  400602:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400604:	4b23      	ldr	r3, [pc, #140]	; (400694 <SystemCoreClockUpdate+0xf0>)
  400606:	6a1b      	ldr	r3, [r3, #32]
  400608:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40060c:	2b10      	cmp	r3, #16
  40060e:	d005      	beq.n	40061c <SystemCoreClockUpdate+0x78>
  400610:	2b20      	cmp	r3, #32
  400612:	d1d0      	bne.n	4005b6 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  400614:	4a22      	ldr	r2, [pc, #136]	; (4006a0 <SystemCoreClockUpdate+0xfc>)
  400616:	4b20      	ldr	r3, [pc, #128]	; (400698 <SystemCoreClockUpdate+0xf4>)
  400618:	601a      	str	r2, [r3, #0]
          break;
  40061a:	e7cc      	b.n	4005b6 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  40061c:	4a22      	ldr	r2, [pc, #136]	; (4006a8 <SystemCoreClockUpdate+0x104>)
  40061e:	4b1e      	ldr	r3, [pc, #120]	; (400698 <SystemCoreClockUpdate+0xf4>)
  400620:	601a      	str	r2, [r3, #0]
          break;
  400622:	e7c8      	b.n	4005b6 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400624:	4b1b      	ldr	r3, [pc, #108]	; (400694 <SystemCoreClockUpdate+0xf0>)
  400626:	6a1b      	ldr	r3, [r3, #32]
  400628:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40062c:	d016      	beq.n	40065c <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  40062e:	4a1c      	ldr	r2, [pc, #112]	; (4006a0 <SystemCoreClockUpdate+0xfc>)
  400630:	4b19      	ldr	r3, [pc, #100]	; (400698 <SystemCoreClockUpdate+0xf4>)
  400632:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  400634:	4b17      	ldr	r3, [pc, #92]	; (400694 <SystemCoreClockUpdate+0xf0>)
  400636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400638:	f003 0303 	and.w	r3, r3, #3
  40063c:	2b02      	cmp	r3, #2
  40063e:	d1ba      	bne.n	4005b6 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400640:	4a14      	ldr	r2, [pc, #80]	; (400694 <SystemCoreClockUpdate+0xf0>)
  400642:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400644:	6a92      	ldr	r2, [r2, #40]	; 0x28
  400646:	4814      	ldr	r0, [pc, #80]	; (400698 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400648:	f3c1 410a 	ubfx	r1, r1, #16, #11
  40064c:	6803      	ldr	r3, [r0, #0]
  40064e:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400652:	b2d2      	uxtb	r2, r2
  400654:	fbb3 f3f2 	udiv	r3, r3, r2
  400658:	6003      	str	r3, [r0, #0]
  40065a:	e7ac      	b.n	4005b6 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40065c:	4a11      	ldr	r2, [pc, #68]	; (4006a4 <SystemCoreClockUpdate+0x100>)
  40065e:	4b0e      	ldr	r3, [pc, #56]	; (400698 <SystemCoreClockUpdate+0xf4>)
  400660:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400662:	4b0c      	ldr	r3, [pc, #48]	; (400694 <SystemCoreClockUpdate+0xf0>)
  400664:	6a1b      	ldr	r3, [r3, #32]
  400666:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40066a:	2b10      	cmp	r3, #16
  40066c:	d005      	beq.n	40067a <SystemCoreClockUpdate+0xd6>
  40066e:	2b20      	cmp	r3, #32
  400670:	d1e0      	bne.n	400634 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  400672:	4a0b      	ldr	r2, [pc, #44]	; (4006a0 <SystemCoreClockUpdate+0xfc>)
  400674:	4b08      	ldr	r3, [pc, #32]	; (400698 <SystemCoreClockUpdate+0xf4>)
  400676:	601a      	str	r2, [r3, #0]
          break;
  400678:	e7dc      	b.n	400634 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  40067a:	4a0b      	ldr	r2, [pc, #44]	; (4006a8 <SystemCoreClockUpdate+0x104>)
  40067c:	4b06      	ldr	r3, [pc, #24]	; (400698 <SystemCoreClockUpdate+0xf4>)
  40067e:	601a      	str	r2, [r3, #0]
          break;
  400680:	e7d8      	b.n	400634 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  400682:	4a05      	ldr	r2, [pc, #20]	; (400698 <SystemCoreClockUpdate+0xf4>)
  400684:	6813      	ldr	r3, [r2, #0]
  400686:	4909      	ldr	r1, [pc, #36]	; (4006ac <SystemCoreClockUpdate+0x108>)
  400688:	fba1 1303 	umull	r1, r3, r1, r3
  40068c:	085b      	lsrs	r3, r3, #1
  40068e:	6013      	str	r3, [r2, #0]
  400690:	4770      	bx	lr
  400692:	bf00      	nop
  400694:	400e0600 	.word	0x400e0600
  400698:	2040000c 	.word	0x2040000c
  40069c:	400e1810 	.word	0x400e1810
  4006a0:	00b71b00 	.word	0x00b71b00
  4006a4:	003d0900 	.word	0x003d0900
  4006a8:	007a1200 	.word	0x007a1200
  4006ac:	aaaaaaab 	.word	0xaaaaaaab

004006b0 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  4006b0:	4b12      	ldr	r3, [pc, #72]	; (4006fc <system_init_flash+0x4c>)
  4006b2:	4298      	cmp	r0, r3
  4006b4:	d911      	bls.n	4006da <system_init_flash+0x2a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  4006b6:	4b12      	ldr	r3, [pc, #72]	; (400700 <system_init_flash+0x50>)
  4006b8:	4298      	cmp	r0, r3
  4006ba:	d913      	bls.n	4006e4 <system_init_flash+0x34>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4006bc:	4b11      	ldr	r3, [pc, #68]	; (400704 <system_init_flash+0x54>)
  4006be:	4298      	cmp	r0, r3
  4006c0:	d914      	bls.n	4006ec <system_init_flash+0x3c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4006c2:	4b11      	ldr	r3, [pc, #68]	; (400708 <system_init_flash+0x58>)
  4006c4:	4298      	cmp	r0, r3
  4006c6:	d915      	bls.n	4006f4 <system_init_flash+0x44>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4006c8:	4b10      	ldr	r3, [pc, #64]	; (40070c <system_init_flash+0x5c>)
  4006ca:	4298      	cmp	r0, r3
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4006cc:	bf94      	ite	ls
  4006ce:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4006d2:	4a0f      	ldrhi	r2, [pc, #60]	; (400710 <system_init_flash+0x60>)
  4006d4:	4b0f      	ldr	r3, [pc, #60]	; (400714 <system_init_flash+0x64>)
  4006d6:	601a      	str	r2, [r3, #0]
  4006d8:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4006da:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4006de:	4b0d      	ldr	r3, [pc, #52]	; (400714 <system_init_flash+0x64>)
  4006e0:	601a      	str	r2, [r3, #0]
  4006e2:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4006e4:	4a0c      	ldr	r2, [pc, #48]	; (400718 <system_init_flash+0x68>)
  4006e6:	4b0b      	ldr	r3, [pc, #44]	; (400714 <system_init_flash+0x64>)
  4006e8:	601a      	str	r2, [r3, #0]
  4006ea:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4006ec:	4a0b      	ldr	r2, [pc, #44]	; (40071c <system_init_flash+0x6c>)
  4006ee:	4b09      	ldr	r3, [pc, #36]	; (400714 <system_init_flash+0x64>)
  4006f0:	601a      	str	r2, [r3, #0]
  4006f2:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4006f4:	4a0a      	ldr	r2, [pc, #40]	; (400720 <system_init_flash+0x70>)
  4006f6:	4b07      	ldr	r3, [pc, #28]	; (400714 <system_init_flash+0x64>)
  4006f8:	601a      	str	r2, [r3, #0]
  4006fa:	4770      	bx	lr
  4006fc:	01312cff 	.word	0x01312cff
  400700:	026259ff 	.word	0x026259ff
  400704:	039386ff 	.word	0x039386ff
  400708:	04c4b3ff 	.word	0x04c4b3ff
  40070c:	05f5e0ff 	.word	0x05f5e0ff
  400710:	04000500 	.word	0x04000500
  400714:	400e0c00 	.word	0x400e0c00
  400718:	04000100 	.word	0x04000100
  40071c:	04000200 	.word	0x04000200
  400720:	04000300 	.word	0x04000300

00400724 <init>:
/* funcoes                                                              */
/************************************************************************/

// Função de inicialização do uC
void init(void)
{
  400724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400728:	b082      	sub	sp, #8
	/* INICIALIZAR CLOCK*/
	sysclk_init();
  40072a:	4b31      	ldr	r3, [pc, #196]	; (4007f0 <init+0xcc>)
  40072c:	4798      	blx	r3
	
	/* DESABILITANDO WATCHDOG TIMER*/
	WDT->WDT_MR = WDT_MR_WDDIS;
  40072e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400732:	4b30      	ldr	r3, [pc, #192]	; (4007f4 <init+0xd0>)
  400734:	605a      	str	r2, [r3, #4]
	// BUTTON_SAME NA
	// BUTTON1 PLAY
	// BUTTON2 STOP
	// BUTTON3 NEXT
	
	pmc_enable_periph_clk(BUZZER_PIO_ID);
  400736:	200a      	movs	r0, #10
  400738:	4c2f      	ldr	r4, [pc, #188]	; (4007f8 <init+0xd4>)
  40073a:	47a0      	blx	r4
	pmc_enable_periph_clk(LED1_OLED_PIO_ID);
  40073c:	200a      	movs	r0, #10
  40073e:	47a0      	blx	r4
	pmc_enable_periph_clk(LED2_OLED_PIO_ID);
  400740:	200c      	movs	r0, #12
  400742:	47a0      	blx	r4
	pmc_enable_periph_clk(LED3_OLED_PIO_ID);
  400744:	200b      	movs	r0, #11
  400746:	47a0      	blx	r4
	pmc_enable_periph_clk(BUTTON_SAME_PIO_ID);
  400748:	200a      	movs	r0, #10
  40074a:	47a0      	blx	r4
	pmc_enable_periph_clk(BUTTON1_OLED_PIO_ID);
  40074c:	2010      	movs	r0, #16
  40074e:	47a0      	blx	r4
	pmc_enable_periph_clk(BUTTON2_OLED_PIO_ID);
  400750:	200a      	movs	r0, #10
  400752:	47a0      	blx	r4
	pmc_enable_periph_clk(BUTTON3_OLED_PIO_ID);
  400754:	200c      	movs	r0, #12
  400756:	47a0      	blx	r4
	
	/* INICIALIZAR PIO*/
	
	/*Inicializando default de início das saídas LED e BUZZER*/
	
	pio_set_output(BUZZER_PIO, BUZZER_PIO_IDX_MASK, 0, 0, 0);
  400758:	4d28      	ldr	r5, [pc, #160]	; (4007fc <init+0xd8>)
  40075a:	2400      	movs	r4, #0
  40075c:	9400      	str	r4, [sp, #0]
  40075e:	4623      	mov	r3, r4
  400760:	4622      	mov	r2, r4
  400762:	2110      	movs	r1, #16
  400764:	4628      	mov	r0, r5
  400766:	4e26      	ldr	r6, [pc, #152]	; (400800 <init+0xdc>)
  400768:	47b0      	blx	r6
	pio_set_output(LED1_OLED_PIO, LED1_OLED_PIO_IDX_MASK, 0, 0, 0);
  40076a:	9400      	str	r4, [sp, #0]
  40076c:	4623      	mov	r3, r4
  40076e:	4622      	mov	r2, r4
  400770:	2101      	movs	r1, #1
  400772:	4628      	mov	r0, r5
  400774:	47b0      	blx	r6
	pio_set_output(LED2_OLED_PIO, LED2_OLED_PIO_IDX_MASK, 0, 0, 0);
  400776:	4f23      	ldr	r7, [pc, #140]	; (400804 <init+0xe0>)
  400778:	9400      	str	r4, [sp, #0]
  40077a:	4623      	mov	r3, r4
  40077c:	4622      	mov	r2, r4
  40077e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  400782:	4638      	mov	r0, r7
  400784:	47b0      	blx	r6
	pio_set_output(LED3_OLED_PIO, LED3_OLED_PIO_IDX_MASK, 0, 0, 0);
  400786:	9400      	str	r4, [sp, #0]
  400788:	4623      	mov	r3, r4
  40078a:	4622      	mov	r2, r4
  40078c:	2104      	movs	r1, #4
  40078e:	481e      	ldr	r0, [pc, #120]	; (400808 <init+0xe4>)
  400790:	47b0      	blx	r6
		
	/*Inicializando o default das entradas de Buttons*/
	pio_set_input(BUTTON_SAME_PIO, BUTTON_SAME_PIO_IDX_MASK, PIO_DEFAULT);
  400792:	4622      	mov	r2, r4
  400794:	f44f 6100 	mov.w	r1, #2048	; 0x800
  400798:	4628      	mov	r0, r5
  40079a:	4e1c      	ldr	r6, [pc, #112]	; (40080c <init+0xe8>)
  40079c:	47b0      	blx	r6
	pio_set_input(BUTTON1_OLED_PIO, BUTTON1_OLED_PIO_IDX_MASK, PIO_DEFAULT);
  40079e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 400814 <init+0xf0>
  4007a2:	4622      	mov	r2, r4
  4007a4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4007a8:	4640      	mov	r0, r8
  4007aa:	47b0      	blx	r6
	pio_set_input(BUTTON2_OLED_PIO, BUTTON2_OLED_PIO_IDX_MASK, PIO_DEFAULT);
  4007ac:	4622      	mov	r2, r4
  4007ae:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  4007b2:	4628      	mov	r0, r5
  4007b4:	47b0      	blx	r6
	pio_set_input(BUTTON3_OLED_PIO, BUTTON3_OLED_PIO_IDX_MASK, PIO_DEFAULT);	
  4007b6:	4622      	mov	r2, r4
  4007b8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4007bc:	4638      	mov	r0, r7
  4007be:	47b0      	blx	r6
	
	pio_pull_up(BUTTON_SAME_PIO, BUTTON_SAME_PIO_IDX_MASK, PIO_PULLUP);
  4007c0:	2201      	movs	r2, #1
  4007c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
  4007c6:	4628      	mov	r0, r5
  4007c8:	4c11      	ldr	r4, [pc, #68]	; (400810 <init+0xec>)
  4007ca:	47a0      	blx	r4
	pio_pull_up(BUTTON1_OLED_PIO, BUTTON1_OLED_PIO_IDX_MASK, PIO_PULLUP);
  4007cc:	2201      	movs	r2, #1
  4007ce:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4007d2:	4640      	mov	r0, r8
  4007d4:	47a0      	blx	r4
	pio_pull_up(BUTTON2_OLED_PIO, BUTTON2_OLED_PIO_IDX_MASK, PIO_PULLUP);
  4007d6:	2201      	movs	r2, #1
  4007d8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  4007dc:	4628      	mov	r0, r5
  4007de:	47a0      	blx	r4
	pio_pull_up(BUTTON3_OLED_PIO, BUTTON3_OLED_PIO_IDX_MASK, PIO_PULLUP);
  4007e0:	2201      	movs	r2, #1
  4007e2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  4007e6:	4638      	mov	r0, r7
  4007e8:	47a0      	blx	r4
	
}
  4007ea:	b002      	add	sp, #8
  4007ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4007f0:	004001ad 	.word	0x004001ad
  4007f4:	400e1850 	.word	0x400e1850
  4007f8:	00400485 	.word	0x00400485
  4007fc:	400e0e00 	.word	0x400e0e00
  400800:	0040027f 	.word	0x0040027f
  400804:	400e1200 	.word	0x400e1200
  400808:	400e1000 	.word	0x400e1000
  40080c:	00400249 	.word	0x00400249
  400810:	0040021d 	.word	0x0040021d
  400814:	400e1400 	.word	0x400e1400

00400818 <playNote>:

void playNote(int note, int duration){
  400818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40081c:	b083      	sub	sp, #12
	for (int i = 0; i < duration; i++){
  40081e:	1e0f      	subs	r7, r1, #0
  400820:	dd36      	ble.n	400890 <playNote+0x78>
  400822:	4606      	mov	r6, r0
  400824:	2400      	movs	r4, #0
		pio_set(BUZZER_PIO, BUZZER_PIO_IDX_MASK);
  400826:	f8df b088 	ldr.w	fp, [pc, #136]	; 4008b0 <playNote+0x98>
		delay_us((1000000/note)/2);
  40082a:	f8df a088 	ldr.w	sl, [pc, #136]	; 4008b4 <playNote+0x9c>
  40082e:	f8df 8088 	ldr.w	r8, [pc, #136]	; 4008b8 <playNote+0xa0>
  400832:	f04f 0900 	mov.w	r9, #0
  400836:	e00b      	b.n	400850 <playNote+0x38>
  400838:	2033      	movs	r0, #51	; 0x33
  40083a:	4d17      	ldr	r5, [pc, #92]	; (400898 <playNote+0x80>)
  40083c:	47a8      	blx	r5
		pio_clear(BUZZER_PIO, BUZZER_PIO_IDX_MASK);
  40083e:	2110      	movs	r1, #16
  400840:	4658      	mov	r0, fp
  400842:	4b16      	ldr	r3, [pc, #88]	; (40089c <playNote+0x84>)
  400844:	4798      	blx	r3
		delay_us((1000000/note)/2);		
  400846:	2033      	movs	r0, #51	; 0x33
  400848:	47a8      	blx	r5
	for (int i = 0; i < duration; i++){
  40084a:	3401      	adds	r4, #1
  40084c:	42a7      	cmp	r7, r4
  40084e:	d01f      	beq.n	400890 <playNote+0x78>
		pio_set(BUZZER_PIO, BUZZER_PIO_IDX_MASK);
  400850:	2110      	movs	r1, #16
  400852:	4658      	mov	r0, fp
  400854:	4b12      	ldr	r3, [pc, #72]	; (4008a0 <playNote+0x88>)
  400856:	4798      	blx	r3
		delay_us((1000000/note)/2);
  400858:	4812      	ldr	r0, [pc, #72]	; (4008a4 <playNote+0x8c>)
  40085a:	fb90 f0f6 	sdiv	r0, r0, r6
  40085e:	2800      	cmp	r0, #0
  400860:	d0ea      	beq.n	400838 <playNote+0x20>
  400862:	17c3      	asrs	r3, r0, #31
  400864:	fba0 010a 	umull	r0, r1, r0, sl
  400868:	fb0a 1103 	mla	r1, sl, r3, r1
  40086c:	4a0e      	ldr	r2, [pc, #56]	; (4008a8 <playNote+0x90>)
  40086e:	2300      	movs	r3, #0
  400870:	eb10 0008 	adds.w	r0, r0, r8
  400874:	eb41 0109 	adc.w	r1, r1, r9
  400878:	4d0c      	ldr	r5, [pc, #48]	; (4008ac <playNote+0x94>)
  40087a:	47a8      	blx	r5
  40087c:	9001      	str	r0, [sp, #4]
  40087e:	4d06      	ldr	r5, [pc, #24]	; (400898 <playNote+0x80>)
  400880:	47a8      	blx	r5
		pio_clear(BUZZER_PIO, BUZZER_PIO_IDX_MASK);
  400882:	2110      	movs	r1, #16
  400884:	4658      	mov	r0, fp
  400886:	4b05      	ldr	r3, [pc, #20]	; (40089c <playNote+0x84>)
  400888:	4798      	blx	r3
		delay_us((1000000/note)/2);		
  40088a:	9801      	ldr	r0, [sp, #4]
  40088c:	47a8      	blx	r5
  40088e:	e7dc      	b.n	40084a <playNote+0x32>
	}		
}
  400890:	b003      	add	sp, #12
  400892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400896:	bf00      	nop
  400898:	20400001 	.word	0x20400001
  40089c:	0040022b 	.word	0x0040022b
  4008a0:	00400227 	.word	0x00400227
  4008a4:	0007a120 	.word	0x0007a120
  4008a8:	005a83e0 	.word	0x005a83e0
  4008ac:	00400a95 	.word	0x00400a95
  4008b0:	400e0e00 	.word	0x400e0e00
  4008b4:	11e1a300 	.word	0x11e1a300
  4008b8:	005a83df 	.word	0x005a83df

004008bc <playSong>:

void playSong(int notes[], int sizeOne, int times[], int sizeTwo){
  4008bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int i = 0; i < sizeOne; i++){
  4008c0:	f1b1 0b00 	subs.w	fp, r1, #0
  4008c4:	dd4d      	ble.n	400962 <playSong+0xa6>
  4008c6:	1f07      	subs	r7, r0, #4
  4008c8:	1f15      	subs	r5, r2, #4
  4008ca:	2600      	movs	r6, #0
		if(!pio_get(BUTTON1_OLED_PIO, PIO_INPUT, BUTTON1_OLED_PIO_IDX_MASK) || !pio_get(BUTTON2_OLED_PIO, PIO_INPUT, BUTTON2_OLED_PIO_IDX_MASK) ||
  4008cc:	4c26      	ldr	r4, [pc, #152]	; (400968 <playSong+0xac>)
		 !pio_get(BUTTON3_OLED_PIO, PIO_INPUT, BUTTON3_OLED_PIO_IDX_MASK) || !pio_get(BUTTON_SAME_PIO, PIO_INPUT, BUTTON_SAME_PIO_IDX_MASK)){
			 break;
		 }
		playNote(notes[i], times[i]);
		delay_ms(times[i]/6);
  4008ce:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 400984 <playSong+0xc8>
  4008d2:	e005      	b.n	4008e0 <playSong+0x24>
  4008d4:	2033      	movs	r0, #51	; 0x33
  4008d6:	4b25      	ldr	r3, [pc, #148]	; (40096c <playSong+0xb0>)
  4008d8:	4798      	blx	r3
	for (int i = 0; i < sizeOne; i++){
  4008da:	3601      	adds	r6, #1
  4008dc:	45b3      	cmp	fp, r6
  4008de:	d040      	beq.n	400962 <playSong+0xa6>
		if(!pio_get(BUTTON1_OLED_PIO, PIO_INPUT, BUTTON1_OLED_PIO_IDX_MASK) || !pio_get(BUTTON2_OLED_PIO, PIO_INPUT, BUTTON2_OLED_PIO_IDX_MASK) ||
  4008e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4008e4:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4008e8:	4821      	ldr	r0, [pc, #132]	; (400970 <playSong+0xb4>)
  4008ea:	47a0      	blx	r4
  4008ec:	2800      	cmp	r0, #0
  4008ee:	d038      	beq.n	400962 <playSong+0xa6>
  4008f0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4008f4:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4008f8:	481e      	ldr	r0, [pc, #120]	; (400974 <playSong+0xb8>)
  4008fa:	47a0      	blx	r4
  4008fc:	b388      	cbz	r0, 400962 <playSong+0xa6>
		 !pio_get(BUTTON3_OLED_PIO, PIO_INPUT, BUTTON3_OLED_PIO_IDX_MASK) || !pio_get(BUTTON_SAME_PIO, PIO_INPUT, BUTTON_SAME_PIO_IDX_MASK)){
  4008fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  400902:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  400906:	481c      	ldr	r0, [pc, #112]	; (400978 <playSong+0xbc>)
  400908:	47a0      	blx	r4
		if(!pio_get(BUTTON1_OLED_PIO, PIO_INPUT, BUTTON1_OLED_PIO_IDX_MASK) || !pio_get(BUTTON2_OLED_PIO, PIO_INPUT, BUTTON2_OLED_PIO_IDX_MASK) ||
  40090a:	b350      	cbz	r0, 400962 <playSong+0xa6>
		 !pio_get(BUTTON3_OLED_PIO, PIO_INPUT, BUTTON3_OLED_PIO_IDX_MASK) || !pio_get(BUTTON_SAME_PIO, PIO_INPUT, BUTTON_SAME_PIO_IDX_MASK)){
  40090c:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400910:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  400914:	4817      	ldr	r0, [pc, #92]	; (400974 <playSong+0xb8>)
  400916:	47a0      	blx	r4
  400918:	b318      	cbz	r0, 400962 <playSong+0xa6>
		playNote(notes[i], times[i]);
  40091a:	6869      	ldr	r1, [r5, #4]
  40091c:	f857 0f04 	ldr.w	r0, [r7, #4]!
  400920:	4b16      	ldr	r3, [pc, #88]	; (40097c <playSong+0xc0>)
  400922:	4798      	blx	r3
		delay_ms(times[i]/6);
  400924:	f855 0f04 	ldr.w	r0, [r5, #4]!
  400928:	1d43      	adds	r3, r0, #5
  40092a:	2b0a      	cmp	r3, #10
  40092c:	d9d2      	bls.n	4008d4 <playSong+0x18>
  40092e:	4b14      	ldr	r3, [pc, #80]	; (400980 <playSong+0xc4>)
  400930:	fb83 3800 	smull	r3, r8, r3, r0
  400934:	eba8 70e0 	sub.w	r0, r8, r0, asr #31
  400938:	17c3      	asrs	r3, r0, #31
  40093a:	fba0 890a 	umull	r8, r9, r0, sl
  40093e:	fb0a 9903 	mla	r9, sl, r3, r9
  400942:	f241 722c 	movw	r2, #5932	; 0x172c
  400946:	2300      	movs	r3, #0
  400948:	f241 702b 	movw	r0, #5931	; 0x172b
  40094c:	2100      	movs	r1, #0
  40094e:	eb10 0008 	adds.w	r0, r0, r8
  400952:	eb41 0109 	adc.w	r1, r1, r9
  400956:	f8df 8030 	ldr.w	r8, [pc, #48]	; 400988 <playSong+0xcc>
  40095a:	47c0      	blx	r8
  40095c:	4b03      	ldr	r3, [pc, #12]	; (40096c <playSong+0xb0>)
  40095e:	4798      	blx	r3
  400960:	e7bb      	b.n	4008da <playSong+0x1e>
  400962:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400966:	bf00      	nop
  400968:	0040022f 	.word	0x0040022f
  40096c:	20400001 	.word	0x20400001
  400970:	400e1400 	.word	0x400e1400
  400974:	400e0e00 	.word	0x400e0e00
  400978:	400e1200 	.word	0x400e1200
  40097c:	00400819 	.word	0x00400819
  400980:	2aaaaaab 	.word	0x2aaaaaab
  400984:	11e1a300 	.word	0x11e1a300
  400988:	00400a95 	.word	0x00400a95

0040098c <main>:
/************************************************************************/
/* Main                                                                 */
/************************************************************************/

// Funcao principal chamada na inicalizacao do uC.
int main(void) {
  40098c:	b580      	push	{r7, lr}
	// inicializa sistema e IOs
	init();
  40098e:	4b32      	ldr	r3, [pc, #200]	; (400a58 <main+0xcc>)
  400990:	4798      	blx	r3

	pio_set(LED1_OLED_PIO, LED1_OLED_PIO_IDX_MASK);
  400992:	2101      	movs	r1, #1
  400994:	4831      	ldr	r0, [pc, #196]	; (400a5c <main+0xd0>)
  400996:	4c32      	ldr	r4, [pc, #200]	; (400a60 <main+0xd4>)
  400998:	47a0      	blx	r4
	pio_set(LED2_OLED_PIO, LED2_OLED_PIO_IDX_MASK);
  40099a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40099e:	4831      	ldr	r0, [pc, #196]	; (400a64 <main+0xd8>)
  4009a0:	47a0      	blx	r4
	pio_set(LED3_OLED_PIO, LED3_OLED_PIO_IDX_MASK);
  4009a2:	2104      	movs	r1, #4
  4009a4:	4830      	ldr	r0, [pc, #192]	; (400a68 <main+0xdc>)
  4009a6:	47a0      	blx	r4
	
	// super loop
	while (1)
	{
		if (!pio_get(BUTTON1_OLED_PIO, PIO_INPUT, BUTTON1_OLED_PIO_IDX_MASK)){
			pio_clear(LED1_OLED_PIO, LED1_OLED_PIO_IDX_MASK);
  4009a8:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 400a8c <main+0x100>
  4009ac:	4f2b      	ldr	r7, [pc, #172]	; (400a5c <main+0xd0>)
			pio_set(LED2_OLED_PIO, LED2_OLED_PIO_IDX_MASK);
  4009ae:	4e2d      	ldr	r6, [pc, #180]	; (400a64 <main+0xd8>)
  4009b0:	e04c      	b.n	400a4c <main+0xc0>
			pio_clear(LED1_OLED_PIO, LED1_OLED_PIO_IDX_MASK);
  4009b2:	2101      	movs	r1, #1
  4009b4:	4638      	mov	r0, r7
  4009b6:	47d0      	blx	sl
			pio_set(LED2_OLED_PIO, LED2_OLED_PIO_IDX_MASK);
  4009b8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4009bc:	4630      	mov	r0, r6
  4009be:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 400a60 <main+0xd4>
  4009c2:	47c8      	blx	r9
			pio_set(LED3_OLED_PIO, LED3_OLED_PIO_IDX_MASK);
  4009c4:	2104      	movs	r1, #4
  4009c6:	4828      	ldr	r0, [pc, #160]	; (400a68 <main+0xdc>)
  4009c8:	47c8      	blx	r9
			playSong(pirate_notes, sizeof(pirate_notes)/sizeof(int), pirate_tempo, sizeof(pirate_tempo)/sizeof(int));
  4009ca:	23cb      	movs	r3, #203	; 0xcb
  4009cc:	4a27      	ldr	r2, [pc, #156]	; (400a6c <main+0xe0>)
  4009ce:	4619      	mov	r1, r3
  4009d0:	4827      	ldr	r0, [pc, #156]	; (400a70 <main+0xe4>)
  4009d2:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 400a84 <main+0xf8>
  4009d6:	47c8      	blx	r9
  4009d8:	e00c      	b.n	4009f4 <main+0x68>
			pio_clear(LED2_OLED_PIO, LED2_OLED_PIO_IDX_MASK);
			pio_set(LED3_OLED_PIO, LED3_OLED_PIO_IDX_MASK);			
			playSong(tetrisNotes, sizeof(tetrisNotes)/sizeof(int), tetrisDurations, sizeof(tetrisDurations)/sizeof(int));
		}
		
		if (!pio_get(BUTTON2_OLED_PIO, PIO_INPUT, BUTTON2_OLED_PIO_IDX_MASK)){
  4009da:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4009de:	4629      	mov	r1, r5
  4009e0:	4638      	mov	r0, r7
  4009e2:	47a0      	blx	r4
  4009e4:	b308      	cbz	r0, 400a2a <main+0x9e>
		if (!pio_get(BUTTON1_OLED_PIO, PIO_INPUT, BUTTON1_OLED_PIO_IDX_MASK)){
  4009e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4009ea:	4629      	mov	r1, r5
  4009ec:	4640      	mov	r0, r8
  4009ee:	47a0      	blx	r4
  4009f0:	2800      	cmp	r0, #0
  4009f2:	d0de      	beq.n	4009b2 <main+0x26>
		if (!pio_get(BUTTON3_OLED_PIO, PIO_INPUT, BUTTON3_OLED_PIO_IDX_MASK)){
  4009f4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  4009f8:	4629      	mov	r1, r5
  4009fa:	4630      	mov	r0, r6
  4009fc:	47a0      	blx	r4
  4009fe:	2800      	cmp	r0, #0
  400a00:	d1eb      	bne.n	4009da <main+0x4e>
			pio_set(LED1_OLED_PIO, LED1_OLED_PIO_IDX_MASK);
  400a02:	2101      	movs	r1, #1
  400a04:	4638      	mov	r0, r7
  400a06:	f8df 9058 	ldr.w	r9, [pc, #88]	; 400a60 <main+0xd4>
  400a0a:	47c8      	blx	r9
			pio_clear(LED2_OLED_PIO, LED2_OLED_PIO_IDX_MASK);
  400a0c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  400a10:	4630      	mov	r0, r6
  400a12:	47d0      	blx	sl
			pio_set(LED3_OLED_PIO, LED3_OLED_PIO_IDX_MASK);			
  400a14:	2104      	movs	r1, #4
  400a16:	4814      	ldr	r0, [pc, #80]	; (400a68 <main+0xdc>)
  400a18:	47c8      	blx	r9
			playSong(tetrisNotes, sizeof(tetrisNotes)/sizeof(int), tetrisDurations, sizeof(tetrisDurations)/sizeof(int));
  400a1a:	2328      	movs	r3, #40	; 0x28
  400a1c:	4a15      	ldr	r2, [pc, #84]	; (400a74 <main+0xe8>)
  400a1e:	4619      	mov	r1, r3
  400a20:	4815      	ldr	r0, [pc, #84]	; (400a78 <main+0xec>)
  400a22:	f8df 9060 	ldr.w	r9, [pc, #96]	; 400a84 <main+0xf8>
  400a26:	47c8      	blx	r9
  400a28:	e7d7      	b.n	4009da <main+0x4e>
			pio_set(LED1_OLED_PIO, LED1_OLED_PIO_IDX_MASK);
  400a2a:	2101      	movs	r1, #1
  400a2c:	4638      	mov	r0, r7
  400a2e:	4c0c      	ldr	r4, [pc, #48]	; (400a60 <main+0xd4>)
  400a30:	47a0      	blx	r4
			pio_set(LED2_OLED_PIO, LED2_OLED_PIO_IDX_MASK);
  400a32:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  400a36:	4630      	mov	r0, r6
  400a38:	47a0      	blx	r4
			pio_clear(LED3_OLED_PIO, LED3_OLED_PIO_IDX_MASK);
  400a3a:	2104      	movs	r1, #4
  400a3c:	480a      	ldr	r0, [pc, #40]	; (400a68 <main+0xdc>)
  400a3e:	47d0      	blx	sl
			playSong(happyBirthdayNotes, sizeof(happyBirthdayNotes)/sizeof(int), happyBirthdayDuration, sizeof(happyBirthdayDuration)/sizeof(int));
  400a40:	2319      	movs	r3, #25
  400a42:	4a0e      	ldr	r2, [pc, #56]	; (400a7c <main+0xf0>)
  400a44:	4619      	mov	r1, r3
  400a46:	480e      	ldr	r0, [pc, #56]	; (400a80 <main+0xf4>)
  400a48:	4c0e      	ldr	r4, [pc, #56]	; (400a84 <main+0xf8>)
  400a4a:	47a0      	blx	r4
		if (!pio_get(BUTTON1_OLED_PIO, PIO_INPUT, BUTTON1_OLED_PIO_IDX_MASK)){
  400a4c:	f8df 8040 	ldr.w	r8, [pc, #64]	; 400a90 <main+0x104>
  400a50:	f04f 5520 	mov.w	r5, #671088640	; 0x28000000
  400a54:	4c0c      	ldr	r4, [pc, #48]	; (400a88 <main+0xfc>)
  400a56:	e7c6      	b.n	4009e6 <main+0x5a>
  400a58:	00400725 	.word	0x00400725
  400a5c:	400e0e00 	.word	0x400e0e00
  400a60:	00400227 	.word	0x00400227
  400a64:	400e1200 	.word	0x400e1200
  400a68:	400e1000 	.word	0x400e1000
  400a6c:	20400404 	.word	0x20400404
  400a70:	204000d8 	.word	0x204000d8
  400a74:	20400730 	.word	0x20400730
  400a78:	204007d0 	.word	0x204007d0
  400a7c:	20400010 	.word	0x20400010
  400a80:	20400074 	.word	0x20400074
  400a84:	004008bd 	.word	0x004008bd
  400a88:	0040022f 	.word	0x0040022f
  400a8c:	0040022b 	.word	0x0040022b
  400a90:	400e1400 	.word	0x400e1400

00400a94 <__aeabi_uldivmod>:
  400a94:	b953      	cbnz	r3, 400aac <__aeabi_uldivmod+0x18>
  400a96:	b94a      	cbnz	r2, 400aac <__aeabi_uldivmod+0x18>
  400a98:	2900      	cmp	r1, #0
  400a9a:	bf08      	it	eq
  400a9c:	2800      	cmpeq	r0, #0
  400a9e:	bf1c      	itt	ne
  400aa0:	f04f 31ff 	movne.w	r1, #4294967295
  400aa4:	f04f 30ff 	movne.w	r0, #4294967295
  400aa8:	f000 b97a 	b.w	400da0 <__aeabi_idiv0>
  400aac:	f1ad 0c08 	sub.w	ip, sp, #8
  400ab0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  400ab4:	f000 f806 	bl	400ac4 <__udivmoddi4>
  400ab8:	f8dd e004 	ldr.w	lr, [sp, #4]
  400abc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  400ac0:	b004      	add	sp, #16
  400ac2:	4770      	bx	lr

00400ac4 <__udivmoddi4>:
  400ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400ac8:	468c      	mov	ip, r1
  400aca:	460d      	mov	r5, r1
  400acc:	4604      	mov	r4, r0
  400ace:	9e08      	ldr	r6, [sp, #32]
  400ad0:	2b00      	cmp	r3, #0
  400ad2:	d151      	bne.n	400b78 <__udivmoddi4+0xb4>
  400ad4:	428a      	cmp	r2, r1
  400ad6:	4617      	mov	r7, r2
  400ad8:	d96d      	bls.n	400bb6 <__udivmoddi4+0xf2>
  400ada:	fab2 fe82 	clz	lr, r2
  400ade:	f1be 0f00 	cmp.w	lr, #0
  400ae2:	d00b      	beq.n	400afc <__udivmoddi4+0x38>
  400ae4:	f1ce 0c20 	rsb	ip, lr, #32
  400ae8:	fa01 f50e 	lsl.w	r5, r1, lr
  400aec:	fa20 fc0c 	lsr.w	ip, r0, ip
  400af0:	fa02 f70e 	lsl.w	r7, r2, lr
  400af4:	ea4c 0c05 	orr.w	ip, ip, r5
  400af8:	fa00 f40e 	lsl.w	r4, r0, lr
  400afc:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  400b00:	0c25      	lsrs	r5, r4, #16
  400b02:	fbbc f8fa 	udiv	r8, ip, sl
  400b06:	fa1f f987 	uxth.w	r9, r7
  400b0a:	fb0a cc18 	mls	ip, sl, r8, ip
  400b0e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  400b12:	fb08 f309 	mul.w	r3, r8, r9
  400b16:	42ab      	cmp	r3, r5
  400b18:	d90a      	bls.n	400b30 <__udivmoddi4+0x6c>
  400b1a:	19ed      	adds	r5, r5, r7
  400b1c:	f108 32ff 	add.w	r2, r8, #4294967295
  400b20:	f080 8123 	bcs.w	400d6a <__udivmoddi4+0x2a6>
  400b24:	42ab      	cmp	r3, r5
  400b26:	f240 8120 	bls.w	400d6a <__udivmoddi4+0x2a6>
  400b2a:	f1a8 0802 	sub.w	r8, r8, #2
  400b2e:	443d      	add	r5, r7
  400b30:	1aed      	subs	r5, r5, r3
  400b32:	b2a4      	uxth	r4, r4
  400b34:	fbb5 f0fa 	udiv	r0, r5, sl
  400b38:	fb0a 5510 	mls	r5, sl, r0, r5
  400b3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  400b40:	fb00 f909 	mul.w	r9, r0, r9
  400b44:	45a1      	cmp	r9, r4
  400b46:	d909      	bls.n	400b5c <__udivmoddi4+0x98>
  400b48:	19e4      	adds	r4, r4, r7
  400b4a:	f100 33ff 	add.w	r3, r0, #4294967295
  400b4e:	f080 810a 	bcs.w	400d66 <__udivmoddi4+0x2a2>
  400b52:	45a1      	cmp	r9, r4
  400b54:	f240 8107 	bls.w	400d66 <__udivmoddi4+0x2a2>
  400b58:	3802      	subs	r0, #2
  400b5a:	443c      	add	r4, r7
  400b5c:	eba4 0409 	sub.w	r4, r4, r9
  400b60:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  400b64:	2100      	movs	r1, #0
  400b66:	2e00      	cmp	r6, #0
  400b68:	d061      	beq.n	400c2e <__udivmoddi4+0x16a>
  400b6a:	fa24 f40e 	lsr.w	r4, r4, lr
  400b6e:	2300      	movs	r3, #0
  400b70:	6034      	str	r4, [r6, #0]
  400b72:	6073      	str	r3, [r6, #4]
  400b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400b78:	428b      	cmp	r3, r1
  400b7a:	d907      	bls.n	400b8c <__udivmoddi4+0xc8>
  400b7c:	2e00      	cmp	r6, #0
  400b7e:	d054      	beq.n	400c2a <__udivmoddi4+0x166>
  400b80:	2100      	movs	r1, #0
  400b82:	e886 0021 	stmia.w	r6, {r0, r5}
  400b86:	4608      	mov	r0, r1
  400b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400b8c:	fab3 f183 	clz	r1, r3
  400b90:	2900      	cmp	r1, #0
  400b92:	f040 808e 	bne.w	400cb2 <__udivmoddi4+0x1ee>
  400b96:	42ab      	cmp	r3, r5
  400b98:	d302      	bcc.n	400ba0 <__udivmoddi4+0xdc>
  400b9a:	4282      	cmp	r2, r0
  400b9c:	f200 80fa 	bhi.w	400d94 <__udivmoddi4+0x2d0>
  400ba0:	1a84      	subs	r4, r0, r2
  400ba2:	eb65 0503 	sbc.w	r5, r5, r3
  400ba6:	2001      	movs	r0, #1
  400ba8:	46ac      	mov	ip, r5
  400baa:	2e00      	cmp	r6, #0
  400bac:	d03f      	beq.n	400c2e <__udivmoddi4+0x16a>
  400bae:	e886 1010 	stmia.w	r6, {r4, ip}
  400bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400bb6:	b912      	cbnz	r2, 400bbe <__udivmoddi4+0xfa>
  400bb8:	2701      	movs	r7, #1
  400bba:	fbb7 f7f2 	udiv	r7, r7, r2
  400bbe:	fab7 fe87 	clz	lr, r7
  400bc2:	f1be 0f00 	cmp.w	lr, #0
  400bc6:	d134      	bne.n	400c32 <__udivmoddi4+0x16e>
  400bc8:	1beb      	subs	r3, r5, r7
  400bca:	0c3a      	lsrs	r2, r7, #16
  400bcc:	fa1f fc87 	uxth.w	ip, r7
  400bd0:	2101      	movs	r1, #1
  400bd2:	fbb3 f8f2 	udiv	r8, r3, r2
  400bd6:	0c25      	lsrs	r5, r4, #16
  400bd8:	fb02 3318 	mls	r3, r2, r8, r3
  400bdc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  400be0:	fb0c f308 	mul.w	r3, ip, r8
  400be4:	42ab      	cmp	r3, r5
  400be6:	d907      	bls.n	400bf8 <__udivmoddi4+0x134>
  400be8:	19ed      	adds	r5, r5, r7
  400bea:	f108 30ff 	add.w	r0, r8, #4294967295
  400bee:	d202      	bcs.n	400bf6 <__udivmoddi4+0x132>
  400bf0:	42ab      	cmp	r3, r5
  400bf2:	f200 80d1 	bhi.w	400d98 <__udivmoddi4+0x2d4>
  400bf6:	4680      	mov	r8, r0
  400bf8:	1aed      	subs	r5, r5, r3
  400bfa:	b2a3      	uxth	r3, r4
  400bfc:	fbb5 f0f2 	udiv	r0, r5, r2
  400c00:	fb02 5510 	mls	r5, r2, r0, r5
  400c04:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  400c08:	fb0c fc00 	mul.w	ip, ip, r0
  400c0c:	45a4      	cmp	ip, r4
  400c0e:	d907      	bls.n	400c20 <__udivmoddi4+0x15c>
  400c10:	19e4      	adds	r4, r4, r7
  400c12:	f100 33ff 	add.w	r3, r0, #4294967295
  400c16:	d202      	bcs.n	400c1e <__udivmoddi4+0x15a>
  400c18:	45a4      	cmp	ip, r4
  400c1a:	f200 80b8 	bhi.w	400d8e <__udivmoddi4+0x2ca>
  400c1e:	4618      	mov	r0, r3
  400c20:	eba4 040c 	sub.w	r4, r4, ip
  400c24:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  400c28:	e79d      	b.n	400b66 <__udivmoddi4+0xa2>
  400c2a:	4631      	mov	r1, r6
  400c2c:	4630      	mov	r0, r6
  400c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400c32:	f1ce 0420 	rsb	r4, lr, #32
  400c36:	fa05 f30e 	lsl.w	r3, r5, lr
  400c3a:	fa07 f70e 	lsl.w	r7, r7, lr
  400c3e:	fa20 f804 	lsr.w	r8, r0, r4
  400c42:	0c3a      	lsrs	r2, r7, #16
  400c44:	fa25 f404 	lsr.w	r4, r5, r4
  400c48:	ea48 0803 	orr.w	r8, r8, r3
  400c4c:	fbb4 f1f2 	udiv	r1, r4, r2
  400c50:	ea4f 4518 	mov.w	r5, r8, lsr #16
  400c54:	fb02 4411 	mls	r4, r2, r1, r4
  400c58:	fa1f fc87 	uxth.w	ip, r7
  400c5c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  400c60:	fb01 f30c 	mul.w	r3, r1, ip
  400c64:	42ab      	cmp	r3, r5
  400c66:	fa00 f40e 	lsl.w	r4, r0, lr
  400c6a:	d909      	bls.n	400c80 <__udivmoddi4+0x1bc>
  400c6c:	19ed      	adds	r5, r5, r7
  400c6e:	f101 30ff 	add.w	r0, r1, #4294967295
  400c72:	f080 808a 	bcs.w	400d8a <__udivmoddi4+0x2c6>
  400c76:	42ab      	cmp	r3, r5
  400c78:	f240 8087 	bls.w	400d8a <__udivmoddi4+0x2c6>
  400c7c:	3902      	subs	r1, #2
  400c7e:	443d      	add	r5, r7
  400c80:	1aeb      	subs	r3, r5, r3
  400c82:	fa1f f588 	uxth.w	r5, r8
  400c86:	fbb3 f0f2 	udiv	r0, r3, r2
  400c8a:	fb02 3310 	mls	r3, r2, r0, r3
  400c8e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  400c92:	fb00 f30c 	mul.w	r3, r0, ip
  400c96:	42ab      	cmp	r3, r5
  400c98:	d907      	bls.n	400caa <__udivmoddi4+0x1e6>
  400c9a:	19ed      	adds	r5, r5, r7
  400c9c:	f100 38ff 	add.w	r8, r0, #4294967295
  400ca0:	d26f      	bcs.n	400d82 <__udivmoddi4+0x2be>
  400ca2:	42ab      	cmp	r3, r5
  400ca4:	d96d      	bls.n	400d82 <__udivmoddi4+0x2be>
  400ca6:	3802      	subs	r0, #2
  400ca8:	443d      	add	r5, r7
  400caa:	1aeb      	subs	r3, r5, r3
  400cac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  400cb0:	e78f      	b.n	400bd2 <__udivmoddi4+0x10e>
  400cb2:	f1c1 0720 	rsb	r7, r1, #32
  400cb6:	fa22 f807 	lsr.w	r8, r2, r7
  400cba:	408b      	lsls	r3, r1
  400cbc:	fa05 f401 	lsl.w	r4, r5, r1
  400cc0:	ea48 0303 	orr.w	r3, r8, r3
  400cc4:	fa20 fe07 	lsr.w	lr, r0, r7
  400cc8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  400ccc:	40fd      	lsrs	r5, r7
  400cce:	ea4e 0e04 	orr.w	lr, lr, r4
  400cd2:	fbb5 f9fc 	udiv	r9, r5, ip
  400cd6:	ea4f 441e 	mov.w	r4, lr, lsr #16
  400cda:	fb0c 5519 	mls	r5, ip, r9, r5
  400cde:	fa1f f883 	uxth.w	r8, r3
  400ce2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  400ce6:	fb09 f408 	mul.w	r4, r9, r8
  400cea:	42ac      	cmp	r4, r5
  400cec:	fa02 f201 	lsl.w	r2, r2, r1
  400cf0:	fa00 fa01 	lsl.w	sl, r0, r1
  400cf4:	d908      	bls.n	400d08 <__udivmoddi4+0x244>
  400cf6:	18ed      	adds	r5, r5, r3
  400cf8:	f109 30ff 	add.w	r0, r9, #4294967295
  400cfc:	d243      	bcs.n	400d86 <__udivmoddi4+0x2c2>
  400cfe:	42ac      	cmp	r4, r5
  400d00:	d941      	bls.n	400d86 <__udivmoddi4+0x2c2>
  400d02:	f1a9 0902 	sub.w	r9, r9, #2
  400d06:	441d      	add	r5, r3
  400d08:	1b2d      	subs	r5, r5, r4
  400d0a:	fa1f fe8e 	uxth.w	lr, lr
  400d0e:	fbb5 f0fc 	udiv	r0, r5, ip
  400d12:	fb0c 5510 	mls	r5, ip, r0, r5
  400d16:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  400d1a:	fb00 f808 	mul.w	r8, r0, r8
  400d1e:	45a0      	cmp	r8, r4
  400d20:	d907      	bls.n	400d32 <__udivmoddi4+0x26e>
  400d22:	18e4      	adds	r4, r4, r3
  400d24:	f100 35ff 	add.w	r5, r0, #4294967295
  400d28:	d229      	bcs.n	400d7e <__udivmoddi4+0x2ba>
  400d2a:	45a0      	cmp	r8, r4
  400d2c:	d927      	bls.n	400d7e <__udivmoddi4+0x2ba>
  400d2e:	3802      	subs	r0, #2
  400d30:	441c      	add	r4, r3
  400d32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  400d36:	eba4 0408 	sub.w	r4, r4, r8
  400d3a:	fba0 8902 	umull	r8, r9, r0, r2
  400d3e:	454c      	cmp	r4, r9
  400d40:	46c6      	mov	lr, r8
  400d42:	464d      	mov	r5, r9
  400d44:	d315      	bcc.n	400d72 <__udivmoddi4+0x2ae>
  400d46:	d012      	beq.n	400d6e <__udivmoddi4+0x2aa>
  400d48:	b156      	cbz	r6, 400d60 <__udivmoddi4+0x29c>
  400d4a:	ebba 030e 	subs.w	r3, sl, lr
  400d4e:	eb64 0405 	sbc.w	r4, r4, r5
  400d52:	fa04 f707 	lsl.w	r7, r4, r7
  400d56:	40cb      	lsrs	r3, r1
  400d58:	431f      	orrs	r7, r3
  400d5a:	40cc      	lsrs	r4, r1
  400d5c:	6037      	str	r7, [r6, #0]
  400d5e:	6074      	str	r4, [r6, #4]
  400d60:	2100      	movs	r1, #0
  400d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400d66:	4618      	mov	r0, r3
  400d68:	e6f8      	b.n	400b5c <__udivmoddi4+0x98>
  400d6a:	4690      	mov	r8, r2
  400d6c:	e6e0      	b.n	400b30 <__udivmoddi4+0x6c>
  400d6e:	45c2      	cmp	sl, r8
  400d70:	d2ea      	bcs.n	400d48 <__udivmoddi4+0x284>
  400d72:	ebb8 0e02 	subs.w	lr, r8, r2
  400d76:	eb69 0503 	sbc.w	r5, r9, r3
  400d7a:	3801      	subs	r0, #1
  400d7c:	e7e4      	b.n	400d48 <__udivmoddi4+0x284>
  400d7e:	4628      	mov	r0, r5
  400d80:	e7d7      	b.n	400d32 <__udivmoddi4+0x26e>
  400d82:	4640      	mov	r0, r8
  400d84:	e791      	b.n	400caa <__udivmoddi4+0x1e6>
  400d86:	4681      	mov	r9, r0
  400d88:	e7be      	b.n	400d08 <__udivmoddi4+0x244>
  400d8a:	4601      	mov	r1, r0
  400d8c:	e778      	b.n	400c80 <__udivmoddi4+0x1bc>
  400d8e:	3802      	subs	r0, #2
  400d90:	443c      	add	r4, r7
  400d92:	e745      	b.n	400c20 <__udivmoddi4+0x15c>
  400d94:	4608      	mov	r0, r1
  400d96:	e708      	b.n	400baa <__udivmoddi4+0xe6>
  400d98:	f1a8 0802 	sub.w	r8, r8, #2
  400d9c:	443d      	add	r5, r7
  400d9e:	e72b      	b.n	400bf8 <__udivmoddi4+0x134>

00400da0 <__aeabi_idiv0>:
  400da0:	4770      	bx	lr
  400da2:	bf00      	nop

00400da4 <__libc_init_array>:
  400da4:	b570      	push	{r4, r5, r6, lr}
  400da6:	4e0f      	ldr	r6, [pc, #60]	; (400de4 <__libc_init_array+0x40>)
  400da8:	4d0f      	ldr	r5, [pc, #60]	; (400de8 <__libc_init_array+0x44>)
  400daa:	1b76      	subs	r6, r6, r5
  400dac:	10b6      	asrs	r6, r6, #2
  400dae:	bf18      	it	ne
  400db0:	2400      	movne	r4, #0
  400db2:	d005      	beq.n	400dc0 <__libc_init_array+0x1c>
  400db4:	3401      	adds	r4, #1
  400db6:	f855 3b04 	ldr.w	r3, [r5], #4
  400dba:	4798      	blx	r3
  400dbc:	42a6      	cmp	r6, r4
  400dbe:	d1f9      	bne.n	400db4 <__libc_init_array+0x10>
  400dc0:	4e0a      	ldr	r6, [pc, #40]	; (400dec <__libc_init_array+0x48>)
  400dc2:	4d0b      	ldr	r5, [pc, #44]	; (400df0 <__libc_init_array+0x4c>)
  400dc4:	1b76      	subs	r6, r6, r5
  400dc6:	f000 f8a7 	bl	400f18 <_init>
  400dca:	10b6      	asrs	r6, r6, #2
  400dcc:	bf18      	it	ne
  400dce:	2400      	movne	r4, #0
  400dd0:	d006      	beq.n	400de0 <__libc_init_array+0x3c>
  400dd2:	3401      	adds	r4, #1
  400dd4:	f855 3b04 	ldr.w	r3, [r5], #4
  400dd8:	4798      	blx	r3
  400dda:	42a6      	cmp	r6, r4
  400ddc:	d1f9      	bne.n	400dd2 <__libc_init_array+0x2e>
  400dde:	bd70      	pop	{r4, r5, r6, pc}
  400de0:	bd70      	pop	{r4, r5, r6, pc}
  400de2:	bf00      	nop
  400de4:	00400f24 	.word	0x00400f24
  400de8:	00400f24 	.word	0x00400f24
  400dec:	00400f2c 	.word	0x00400f2c
  400df0:	00400f24 	.word	0x00400f24

00400df4 <register_fini>:
  400df4:	4b02      	ldr	r3, [pc, #8]	; (400e00 <register_fini+0xc>)
  400df6:	b113      	cbz	r3, 400dfe <register_fini+0xa>
  400df8:	4802      	ldr	r0, [pc, #8]	; (400e04 <register_fini+0x10>)
  400dfa:	f000 b805 	b.w	400e08 <atexit>
  400dfe:	4770      	bx	lr
  400e00:	00000000 	.word	0x00000000
  400e04:	00400e15 	.word	0x00400e15

00400e08 <atexit>:
  400e08:	2300      	movs	r3, #0
  400e0a:	4601      	mov	r1, r0
  400e0c:	461a      	mov	r2, r3
  400e0e:	4618      	mov	r0, r3
  400e10:	f000 b81e 	b.w	400e50 <__register_exitproc>

00400e14 <__libc_fini_array>:
  400e14:	b538      	push	{r3, r4, r5, lr}
  400e16:	4c0a      	ldr	r4, [pc, #40]	; (400e40 <__libc_fini_array+0x2c>)
  400e18:	4d0a      	ldr	r5, [pc, #40]	; (400e44 <__libc_fini_array+0x30>)
  400e1a:	1b64      	subs	r4, r4, r5
  400e1c:	10a4      	asrs	r4, r4, #2
  400e1e:	d00a      	beq.n	400e36 <__libc_fini_array+0x22>
  400e20:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  400e24:	3b01      	subs	r3, #1
  400e26:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  400e2a:	3c01      	subs	r4, #1
  400e2c:	f855 3904 	ldr.w	r3, [r5], #-4
  400e30:	4798      	blx	r3
  400e32:	2c00      	cmp	r4, #0
  400e34:	d1f9      	bne.n	400e2a <__libc_fini_array+0x16>
  400e36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  400e3a:	f000 b877 	b.w	400f2c <_fini>
  400e3e:	bf00      	nop
  400e40:	00400f3c 	.word	0x00400f3c
  400e44:	00400f38 	.word	0x00400f38

00400e48 <__retarget_lock_acquire_recursive>:
  400e48:	4770      	bx	lr
  400e4a:	bf00      	nop

00400e4c <__retarget_lock_release_recursive>:
  400e4c:	4770      	bx	lr
  400e4e:	bf00      	nop

00400e50 <__register_exitproc>:
  400e50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400e54:	4d2c      	ldr	r5, [pc, #176]	; (400f08 <__register_exitproc+0xb8>)
  400e56:	4606      	mov	r6, r0
  400e58:	6828      	ldr	r0, [r5, #0]
  400e5a:	4698      	mov	r8, r3
  400e5c:	460f      	mov	r7, r1
  400e5e:	4691      	mov	r9, r2
  400e60:	f7ff fff2 	bl	400e48 <__retarget_lock_acquire_recursive>
  400e64:	4b29      	ldr	r3, [pc, #164]	; (400f0c <__register_exitproc+0xbc>)
  400e66:	681c      	ldr	r4, [r3, #0]
  400e68:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  400e6c:	2b00      	cmp	r3, #0
  400e6e:	d03e      	beq.n	400eee <__register_exitproc+0x9e>
  400e70:	685a      	ldr	r2, [r3, #4]
  400e72:	2a1f      	cmp	r2, #31
  400e74:	dc1c      	bgt.n	400eb0 <__register_exitproc+0x60>
  400e76:	f102 0e01 	add.w	lr, r2, #1
  400e7a:	b176      	cbz	r6, 400e9a <__register_exitproc+0x4a>
  400e7c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  400e80:	2401      	movs	r4, #1
  400e82:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  400e86:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  400e8a:	4094      	lsls	r4, r2
  400e8c:	4320      	orrs	r0, r4
  400e8e:	2e02      	cmp	r6, #2
  400e90:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  400e94:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  400e98:	d023      	beq.n	400ee2 <__register_exitproc+0x92>
  400e9a:	3202      	adds	r2, #2
  400e9c:	f8c3 e004 	str.w	lr, [r3, #4]
  400ea0:	6828      	ldr	r0, [r5, #0]
  400ea2:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  400ea6:	f7ff ffd1 	bl	400e4c <__retarget_lock_release_recursive>
  400eaa:	2000      	movs	r0, #0
  400eac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400eb0:	4b17      	ldr	r3, [pc, #92]	; (400f10 <__register_exitproc+0xc0>)
  400eb2:	b30b      	cbz	r3, 400ef8 <__register_exitproc+0xa8>
  400eb4:	f44f 70c8 	mov.w	r0, #400	; 0x190
  400eb8:	f3af 8000 	nop.w
  400ebc:	4603      	mov	r3, r0
  400ebe:	b1d8      	cbz	r0, 400ef8 <__register_exitproc+0xa8>
  400ec0:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  400ec4:	6002      	str	r2, [r0, #0]
  400ec6:	2100      	movs	r1, #0
  400ec8:	6041      	str	r1, [r0, #4]
  400eca:	460a      	mov	r2, r1
  400ecc:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  400ed0:	f04f 0e01 	mov.w	lr, #1
  400ed4:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  400ed8:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  400edc:	2e00      	cmp	r6, #0
  400ede:	d0dc      	beq.n	400e9a <__register_exitproc+0x4a>
  400ee0:	e7cc      	b.n	400e7c <__register_exitproc+0x2c>
  400ee2:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  400ee6:	430c      	orrs	r4, r1
  400ee8:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  400eec:	e7d5      	b.n	400e9a <__register_exitproc+0x4a>
  400eee:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  400ef2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  400ef6:	e7bb      	b.n	400e70 <__register_exitproc+0x20>
  400ef8:	6828      	ldr	r0, [r5, #0]
  400efa:	f7ff ffa7 	bl	400e4c <__retarget_lock_release_recursive>
  400efe:	f04f 30ff 	mov.w	r0, #4294967295
  400f02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400f06:	bf00      	nop
  400f08:	20400c98 	.word	0x20400c98
  400f0c:	00400f14 	.word	0x00400f14
  400f10:	00000000 	.word	0x00000000

00400f14 <_global_impure_ptr>:
  400f14:	20400870                                p.@ 

00400f18 <_init>:
  400f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400f1a:	bf00      	nop
  400f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400f1e:	bc08      	pop	{r3}
  400f20:	469e      	mov	lr, r3
  400f22:	4770      	bx	lr

00400f24 <__init_array_start>:
  400f24:	00400df5 	.word	0x00400df5

00400f28 <__frame_dummy_init_array_entry>:
  400f28:	00400165                                e.@.

00400f2c <_fini>:
  400f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400f2e:	bf00      	nop
  400f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400f32:	bc08      	pop	{r3}
  400f34:	469e      	mov	lr, r3
  400f36:	4770      	bx	lr

00400f38 <__fini_array_start>:
  400f38:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr

2040000a <g_interrupt_enabled>:
2040000a:	0001                                        ..

2040000c <SystemCoreClock>:
2040000c:	0900 003d                                   ..=.

20400010 <happyBirthdayDuration>:
20400010:	0064 0000 0064 0000 00c8 0000 00c8 0000     d...d...........
20400020:	00c8 0000 00fa 0000 0064 0000 0064 0000     ........d...d...
20400030:	00c8 0000 00c8 0000 00c8 0000 00fa 0000     ................
20400040:	0064 0000 0064 0000 00c8 0000 00c8 0000     d...d...........
20400050:	00c8 0000 00c8 0000 00c8 0000 0064 0000     ............d...
20400060:	0064 0000 00c8 0000 00c8 0000 00c8 0000     d...............
20400070:	012c 0000                                   ,...

20400074 <happyBirthdayNotes>:
20400074:	0106 0000 0106 0000 0126 0000 0106 0000     ........&.......
20400084:	015d 0000 014a 0000 0106 0000 0106 0000     ]...J...........
20400094:	0126 0000 0106 0000 0188 0000 015d 0000     &...........]...
204000a4:	0106 0000 0106 0000 020b 0000 01b8 0000     ................
204000b4:	015d 0000 014a 0000 0126 0000 01d2 0000     ]...J...&.......
204000c4:	01d2 0000 01b8 0000 015d 0000 0188 0000     ........].......
204000d4:	015d 0000                                   ]...

204000d8 <pirate_notes>:
204000d8:	014a 0000 0188 0000 01b8 0000 01b8 0000     J...............
204000e8:	0000 0000 01b8 0000 01ee 0000 020b 0000     ................
204000f8:	020b 0000 0000 0000 020b 0000 024b 0000     ............K...
20400108:	01ee 0000 01ee 0000 0000 0000 01b8 0000     ................
20400118:	0188 0000 01b8 0000 0000 0000 014a 0000     ............J...
20400128:	0188 0000 01b8 0000 01b8 0000 0000 0000     ................
20400138:	01b8 0000 01ee 0000 020b 0000 020b 0000     ................
20400148:	0000 0000 020b 0000 024b 0000 01ee 0000     ........K.......
20400158:	01ee 0000 0000 0000 01b8 0000 0188 0000     ................
20400168:	01b8 0000 0000 0000 014a 0000 0188 0000     ........J.......
20400178:	01b8 0000 01b8 0000 0000 0000 01b8 0000     ................
20400188:	020b 0000 024b 0000 024b 0000 0000 0000     ....K...K.......
20400198:	024b 0000 0293 0000 02ba 0000 02ba 0000     K...............
204001a8:	0000 0000 0293 0000 024b 0000 0293 0000     ........K.......
204001b8:	01b8 0000 0000 0000 01b8 0000 01ee 0000     ................
204001c8:	020b 0000 020b 0000 0000 0000 024b 0000     ............K...
204001d8:	0293 0000 01b8 0000 0000 0000 01b8 0000     ................
204001e8:	020b 0000 01ee 0000 01ee 0000 0000 0000     ................
204001f8:	020b 0000 01b8 0000 01ee 0000 0000 0000     ................
20400208:	01b8 0000 01b8 0000 01b8 0000 01ee 0000     ................
20400218:	020b 0000 020b 0000 0000 0000 020b 0000     ................
20400228:	024b 0000 01ee 0000 01ee 0000 0000 0000     K...............
20400238:	01b8 0000 0188 0000 01b8 0000 0000 0000     ................
20400248:	014a 0000 0188 0000 01b8 0000 01b8 0000     J...............
20400258:	0000 0000 01b8 0000 01ee 0000 020b 0000     ................
20400268:	020b 0000 0000 0000 020b 0000 024b 0000     ............K...
20400278:	01ee 0000 01ee 0000 0000 0000 01b8 0000     ................
20400288:	0188 0000 01b8 0000 0000 0000 014a 0000     ............J...
20400298:	0188 0000 01b8 0000 01b8 0000 0000 0000     ................
204002a8:	01b8 0000 020b 0000 024b 0000 024b 0000     ........K...K...
204002b8:	0000 0000 024b 0000 0293 0000 02ba 0000     ....K...........
204002c8:	02ba 0000 0000 0000 0293 0000 024b 0000     ............K...
204002d8:	0293 0000 01b8 0000 0000 0000 01b8 0000     ................
204002e8:	01ee 0000 020b 0000 020b 0000 0000 0000     ................
204002f8:	024b 0000 0293 0000 01b8 0000 0000 0000     K...............
20400308:	01b8 0000 020b 0000 01ee 0000 01ee 0000     ................
20400318:	0000 0000 020b 0000 01b8 0000 01ee 0000     ................
20400328:	0000 0000 0293 0000 0000 0000 0000 0000     ................
20400338:	02ba 0000 0000 0000 0000 0000 0293 0000     ................
20400348:	0293 0000 0000 0000 0310 0000 0000 0000     ................
20400358:	0293 0000 024b 0000 0000 0000 0000 0000     ....K...........
20400368:	024b 0000 0000 0000 0000 0000 020b 0000     K...............
	...
20400380:	01ee 0000 020b 0000 0000 0000 01ee 0000     ................
20400390:	0000 0000 01b8 0000 0293 0000 0000 0000     ................
204003a0:	0000 0000 02ba 0000 0000 0000 0000 0000     ................
204003b0:	0293 0000 0293 0000 0000 0000 0310 0000     ................
204003c0:	0000 0000 0293 0000 024b 0000 0000 0000     ........K.......
204003d0:	0000 0000 024b 0000 0000 0000 0000 0000     ....K...........
204003e0:	020b 0000 0000 0000 0000 0000 01ee 0000     ................
204003f0:	020b 0000 0000 0000 01ee 0000 0000 0000     ................
20400400:	01b8 0000                                   ....

20400404 <pirate_tempo>:
20400404:	007d 0000 007d 0000 00fa 0000 007d 0000     }...}.......}...
20400414:	007d 0000 007d 0000 007d 0000 00fa 0000     }...}...}.......
20400424:	007d 0000 007d 0000 007d 0000 007d 0000     }...}...}...}...
20400434:	00fa 0000 007d 0000 007d 0000 007d 0000     ....}...}...}...
20400444:	007d 0000 0177 0000 007d 0000 007d 0000     }...w...}...}...
20400454:	007d 0000 00fa 0000 007d 0000 007d 0000     }.......}...}...
20400464:	007d 0000 007d 0000 00fa 0000 007d 0000     }...}.......}...
20400474:	007d 0000 007d 0000 007d 0000 00fa 0000     }...}...}.......
20400484:	007d 0000 007d 0000 007d 0000 007d 0000     }...}...}...}...
20400494:	0177 0000 007d 0000 007d 0000 007d 0000     w...}...}...}...
204004a4:	00fa 0000 007d 0000 007d 0000 007d 0000     ....}...}...}...
204004b4:	007d 0000 00fa 0000 007d 0000 007d 0000     }.......}...}...
204004c4:	007d 0000 007d 0000 00fa 0000 007d 0000     }...}.......}...
204004d4:	007d 0000 007d 0000 007d 0000 007d 0000     }...}...}...}...
204004e4:	00fa 0000 007d 0000 007d 0000 007d 0000     ....}...}...}...
204004f4:	00fa 0000 007d 0000 007d 0000 00fa 0000     ....}...}.......
20400504:	007d 0000 00fa 0000 007d 0000 007d 0000     }.......}...}...
20400514:	007d 0000 00fa 0000 007d 0000 007d 0000     }.......}...}...
20400524:	007d 0000 007d 0000 0177 0000 0177 0000     }...}...w...w...
20400534:	00fa 0000 007d 0000 007d 0000 007d 0000     ....}...}...}...
20400544:	00fa 0000 007d 0000 007d 0000 007d 0000     ....}...}...}...
20400554:	007d 0000 00fa 0000 007d 0000 007d 0000     }.......}...}...
20400564:	007d 0000 007d 0000 0177 0000 007d 0000     }...}...w...}...
20400574:	007d 0000 007d 0000 00fa 0000 007d 0000     }...}.......}...
20400584:	007d 0000 007d 0000 007d 0000 00fa 0000     }...}...}.......
20400594:	007d 0000 007d 0000 007d 0000 007d 0000     }...}...}...}...
204005a4:	00fa 0000 007d 0000 007d 0000 007d 0000     ....}...}...}...
204005b4:	007d 0000 0177 0000 007d 0000 007d 0000     }...w...}...}...
204005c4:	007d 0000 00fa 0000 007d 0000 007d 0000     }.......}...}...
204005d4:	007d 0000 007d 0000 00fa 0000 007d 0000     }...}.......}...
204005e4:	007d 0000 007d 0000 007d 0000 00fa 0000     }...}...}.......
204005f4:	007d 0000 007d 0000 007d 0000 007d 0000     }...}...}...}...
20400604:	007d 0000 00fa 0000 007d 0000 007d 0000     }.......}...}...
20400614:	007d 0000 00fa 0000 007d 0000 007d 0000     }.......}...}...
20400624:	00fa 0000 007d 0000 00fa 0000 007d 0000     ....}.......}...
20400634:	007d 0000 007d 0000 00fa 0000 007d 0000     }...}.......}...
20400644:	007d 0000 007d 0000 007d 0000 0177 0000     }...}...}...w...
20400654:	0177 0000 00fa 0000 007d 0000 0177 0000     w.......}...w...
20400664:	00fa 0000 007d 0000 0177 0000 007d 0000     ....}...w...}...
20400674:	007d 0000 007d 0000 007d 0000 007d 0000     }...}...}...}...
20400684:	007d 0000 007d 0000 007d 0000 0177 0000     }...}...}...w...
20400694:	00fa 0000 007d 0000 0177 0000 00fa 0000     ....}...w.......
204006a4:	007d 0000 0177 0000 007d 0000 007d 0000     }...w...}...}...
204006b4:	007d 0000 007d 0000 007d 0000 01f4 0000     }...}...}.......
204006c4:	00fa 0000 007d 0000 0177 0000 00fa 0000     ....}...w.......
204006d4:	007d 0000 0177 0000 007d 0000 007d 0000     }...w...}...}...
204006e4:	007d 0000 007d 0000 007d 0000 007d 0000     }...}...}...}...
204006f4:	007d 0000 007d 0000 0177 0000 00fa 0000     }...}...w.......
20400704:	007d 0000 0177 0000 00fa 0000 007d 0000     }...w.......}...
20400714:	0177 0000 007d 0000 007d 0000 007d 0000     w...}...}...}...
20400724:	007d 0000 007d 0000 01f4 0000               }...}.......

20400730 <tetrisDurations>:
20400730:	00c8 0000 0064 0000 0064 0000 00c8 0000     ....d...d.......
20400740:	0064 0000 0064 0000 00c8 0000 0064 0000     d...d.......d...
20400750:	0064 0000 00c8 0000 0064 0000 0064 0000     d.......d...d...
20400760:	012c 0000 0064 0000 00c8 0000 00c8 0000     ,...d...........
20400770:	00c8 0000 00c8 0000 0064 0000 0064 0000     ........d...d...
20400780:	0064 0000 0064 0000 012c 0000 0064 0000     d...d...,...d...
20400790:	00c8 0000 0064 0000 0064 0000 012c 0000     ....d...d...,...
204007a0:	0064 0000 00c8 0000 0064 0000 0064 0000     d.......d...d...
204007b0:	00c8 0000 0064 0000 0064 0000 00c8 0000     ....d...d.......
204007c0:	00c8 0000 00c8 0000 00c8 0000 00c8 0000     ................

204007d0 <tetrisNotes>:
204007d0:	0527 0000 03dc 0000 0417 0000 0497 0000     '...............
204007e0:	0417 0000 03dc 0000 0370 0000 0370 0000     ........p...p...
204007f0:	0417 0000 0527 0000 0497 0000 0417 0000     ....'...........
20400800:	03dc 0000 0417 0000 0497 0000 0527 0000     ............'...
20400810:	0417 0000 0370 0000 0370 0000 0370 0000     ....p...p...p...
20400820:	03dc 0000 0417 0000 0497 0000 0575 0000     ............u...
20400830:	06e0 0000 0620 0000 0575 0000 0527 0000     .... ...u...'...
20400840:	0417 0000 0527 0000 0497 0000 0417 0000     ....'...........
20400850:	03dc 0000 03dc 0000 0417 0000 0497 0000     ................
20400860:	0527 0000 0417 0000 0370 0000 0370 0000     '.......p...p...

20400870 <impure_data>:
20400870:	0000 0000 0b5c 2040 0bc4 2040 0c2c 2040     ....\.@ ..@ ,.@ 
	...
20400918:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20400928:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400c98 <__atexit_recursive_mutex>:
20400c98:	0d28 2040                                   (.@ 
